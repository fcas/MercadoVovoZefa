{"repo_token":"QloICX84FmKVcMrTxvRjsJe9SDXMLgPTy","environment":{},"git":{"head":{"id":"1f6d5113a93f4387ac21dc6a398a6013c3f970c9","message":"Testando a origem do erro \"Too Many Connections\"","author_name":"dalayalmeida","author_email":"dalay.almeida@hotmail.com","committer_name":"dalayalmeida","committer_email":"dalay.almeida@hotmail.com"},"branch":"master","remotes":[{"name":"origin","url":"https://github.com/fcas/MercadoVovoZefa.git"}]},"source_files":[{"source":"package dao.concrete;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class ConnectMySql {\n\n\tpublic static final int MYSQL = 0;\n\tprivate static final String MySQLDriver = \"com.mysql.jdbc.Driver\";\n\n\tpublic static Connection conexao(String url, String nome, String senha,\n\t\t\tint banco) throws ClassNotFoundException, SQLException {\n\n\t\tswitch (banco) {\n\t\tcase MYSQL:\n\t\t\tClass.forName(MySQLDriver);\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn DriverManager.getConnection(url, nome, senha);\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,0,null,null,null,null,null,null,null,119,null,119,null,null,null,119,null,null,null,null],"name":"dao/concrete/ConnectMySql.java"},{"source":"package dao.concrete;\n\npublic abstract class DAOFactory {\n\n\tpublic static final int MYSQL = 0;\n\n\tpublic abstract DAOFuncionario createDAOFuncionario();\n\n\tpublic abstract DAOMercadoria createDAOMercadoria();\n\n\tpublic abstract DAOVendas createDAOVendas();\n\n\tpublic static DAOFactory createDAOFactory(int whichFactory) {\n\n\t\tswitch (whichFactory) {\n\t\tcase MYSQL:\n\t\t\treturn new MySQLDAOFactory();\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\n\t}\n}\n","coverage":[null,null,10,null,null,null,null,null,null,null,null,null,null,null,10,null,10,null,0,null,null,null,null,null],"name":"dao/concrete/DAOFactory.java"},{"source":"package dao.concrete;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport dao.interfaces.IDaoFuncionario;\nimport models.funcionario.Funcionario;\nimport models.funcionario.IFuncionario;\n\npublic class DAOFuncionario implements IDaoFuncionario {\n\t\n\tprivate  static Connection con;\n\tprivate static Statement comando; \n\tprivate String usuario;\n\tprivate String senha;\n\t\n\tpublic DAOFuncionario(){\n\t\tusuario = \"travis\";\n\t\tsenha = \"\";\n\t}\n\t\n\tprivate void conectar() {\n\t\t\n\t\ttry {\n\t\t\tcon = ConnectMySql.conexao(\"jdbc:mysql://localhost/tes\", usuario,\n\t\t\t\t\tsenha, MySQLDAOFactory.MYSQL);\n\t\t\tcomando = con.createStatement();\n\t\t} catch (ClassNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void apagarTodos() throws SQLException{\n\t\tString remove_funcionario = \"DELETE FROM funcionario\";\n\t\ttry {\t\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_funcionario);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} \n\t}\n\t\n\tpublic void criarFuncionario (IFuncionario funcionario) {\n\t\n\t\t\tString insert_funcionario = \"INSERT INTO funcionario (nome, rg, cpf, dataNascimento, cargo, salario) VALUES (\"\n\t\t\t\t+ \"'\" + funcionario.getNome() + \"',\" \n\t\t\t\t+ \"'\" + funcionario.getRg() + \"',\" \n\t\t\t\t+ \"'\" + funcionario.getCpf() + \"',\"\n\t\t\t\t+ \"'\" + funcionario.getDataNascimento() + \"',\" \n\t\t\t\t+ \"'\" + funcionario.getCargo() + \"',\" + \n\t\t\t\t+ funcionario.getSalario() + \");\";\n\t\ttry {\n\t\t\t\t\t\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_funcionario);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(insert_funcionario);\n\t}\n\t\n\tpublic void editarFuncionario(IFuncionario funcionario) {\n\t\t\n\t\tString insert_funcionario = \"UPDATE funcionario SET \"\n\t\t\t\t+ \"nome='\" + funcionario.getNome()\n\t\t\t\t+ \"',rg='\" + funcionario.getRg()\n\t\t\t\t+ \"',cpf='\" + funcionario.getCpf()\n\t\t\t\t+ \"',dataNascimento='\" + funcionario.getDataNascimento()\n\t\t\t\t+ \"',cargo='\" + funcionario.getCargo()\n\t\t\t\t+ \"',salario=\" + funcionario.getSalario()\n\t\t\t\t+ \" WHERE rg=\" + funcionario.getRg();\n\t\ttry {\t\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_funcionario);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic void apagarFuncionario(String  rg) {\n\t\t\n\t\tString remove_funcionario = \"DELETE FROM funcionario WHERE rg = \"\n\t\t\t\t+ rg + \t \";\";\n\t\ttry {\t\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_funcionario);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic List listarFuncionario() {\n\n\t\tconectar();\n\t\tList list_funcionario = new ArrayList();\n\t\tResultSet result;\n\t\ttry {\n\t\t\tresult = comando\n\t\t\t\t\t.executeQuery(\"SELECT * FROM funcionario ORDER BY cargo\");\n\t\t\t\n\t\t\twhile (result.next()) {\n\t\t\t\tIFuncionario le = new Funcionario();\n\t\t\t\tle.setNome(result.getString(\"nome\"));\n\t\t\t\tle.setRg(result.getString(\"rg\"));\n\t\t\t\tle.setCpf(result.getString(\"cpf\"));\n\t\t\t\tle.setDataNascimento(result.getString(\"dataNascimento\"));\n\t\t\t\tle.setCargo(result.getString(\"cargo\"));\n\t\t\t\tle.setSalario(result.getDouble(\"salario\"));\n\t\t\t\tlist_funcionario.add(le);\n\t\t\t}\n\t\t\t\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn list_funcionario;\n\n\t}\n\t\n\tpublic void atualizarSalario(IFuncionario funcionario) {\n\t\t\n\t\tString insert_novoSalario = \"UPDATE funcionario SET \"\n\t\t\t\t+ \"salario=\" + funcionario.getSalario()\n\t\t\t\t+ \" WHERE rg='\" + funcionario.getRg() + \"'\";\n\t\ttry {\t\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_novoSalario);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\n\tpublic IFuncionario buscarFuncionario(String rg) {\n\t\tResultSet result = null;\n\t\tIFuncionario le = new Funcionario();\n\t\t\n\t\ttry {\n\t\t\tconectar();\n\t\t\tresult = comando\n\t\t\t\t\t.executeQuery(\"SELECT * FROM funcionario WHERE rg = \"\n\t\t\t\t\t\t\t+ rg + \";\");\n\t\t\tif (result.next()) {\n\t\t\t\tle.setNome(result.getString(\"nome\"));\n\t\t\t\tle.setRg(result.getString(\"rg\"));\n\t\t\t\tle.setCpf(result.getString(\"cpf\"));\n\t\t\t\tle.setDataNascimento(result.getString(\"dataNascimento\"));\n\t\t\t\tle.setCargo(result.getString(\"cargo\"));\n\t\t\t\tle.setSalario(result.getDouble(\"salario\"));\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn le;\n\t}\n\n\t\n\tpublic int quantidadeVendas(IFuncionario funcionario) {\n\t\t\n\t\tResultSet qtdVenda = null;\n\t\t\n\t\ttry {\n\t\t\tconectar();\n\t\t\tqtdVenda = comando\n\t\t\t\t\t.executeQuery(\"SELECT vendedorRg,\" \n\t\t\t\t\t\t\t+ \"COUNT(\" + funcionario.getRg() \n\t\t\t\t\t\t\t+ \") as vendas from vendas GROUP BY vendedorRg\" + \";\");\n\t\t\tif (qtdVenda.next()) {\n\t\t\t\treturn Integer.parseInt(qtdVenda.getString(\"vendas\"));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn -1;\n\t\t\n\t}\n\t\n\tpublic String buscarRg (String rg) {\n\t\t\n\t\tResultSet buscarRg = null;\n\t\t\n\t\ttry {\n\t\t\tconectar();\n\t\t\tbuscarRg = comando\n\t\t\t\t\t.executeQuery(\"SELECT rg\" \n\t\t\t\t\t\t\t+ \" FROM funcionario\" \n\t\t\t\t\t\t\t+ \" WHERE rg=\" + rg);\n\t\t\tif (buscarRg.next()) {\n\t\t\t\treturn buscarRg.getString(\"rg\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t\t\n\t}\n\t\n\t\n\tpublic boolean checaRg (String rg) {\n\t\t\n\t\tResultSet buscarRg = null;\n\t\tString result = null;\n\t\t\n\t\ttry {\n\t\t\tconectar();\n\t\t\tbuscarRg = comando\n\t\t\t\t\t.executeQuery(\"SELECT rg\" \n\t\t\t\t\t\t\t+ \" FROM funcionario\" \n\t\t\t\t\t\t\t+ \" WHERE rg=\" + rg);\n\t\t\tif (buscarRg.next()) {\n\t\t\t\tresult = buscarRg.getString(\"rg\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (result == null || result.equals(\"\")){\n\t\t\treturn false;\n\t\t}else{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t}\n\n\t\n\tpublic double buscarSalario(IFuncionario funcionario) {\n\t\t\n\t\tResultSet salario = null;\n\t\t\n\t\tString buscar_salario = \"SELECT  salario FROM funcionario\"\n\t\t\t\t+ \" WHERE rg='\" + funcionario.getRg() + \"'\";\n\t\ttry {\t\n\t\t\tconectar();\n\t\t\tsalario = comando.executeQuery(buscar_salario);\n\t\t\t\n\t\t\tif (salario.next()) {\n\t\t\t\treturn Double.parseDouble(salario.getString(\"salario\"));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t};\n\t\t\n\t\treturn -1; \n\t}\n\n\tpublic String getUsuario() {\n\t\treturn usuario;\n\t}\n\n\tpublic void setUsuario(String usuario) {\n\t\tthis.usuario = usuario;\n\t}\n\n\tpublic String getSenha() {\n\t\treturn senha;\n\t}\n\n\tpublic void setSenha(String senha) {\n\t\tthis.senha = senha;\n\t}\n\n\t\n\t\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17,17,17,17,null,null,null,null,64,null,64,0,0,0,0,64,64,null,null,2,null,2,2,0,0,2,2,null,null,null,13,null,null,null,null,null,null,null,null,13,13,0,0,13,13,13,null,null,null,2,null,null,null,null,null,null,null,null,2,2,0,0,2,2,null,null,null,9,null,null,9,9,0,0,9,9,null,null,null,5,5,null,null,5,null,null,7,2,2,2,2,2,2,2,2,2,null,null,0,0,5,null,5,null,null,null,null,null,2,null,null,null,2,2,0,0,2,null,2,null,null,null,13,13,null,null,13,13,null,null,13,13,13,13,13,13,13,null,0,null,0,0,13,null,13,null,null,null,null,null,0,null,null,0,0,null,null,null,0,0,null,0,0,0,null,0,null,null,null,null,null,7,null,null,7,7,null,null,null,7,6,null,0,0,1,null,1,null,null,null,null,null,null,6,6,null,null,6,6,null,null,null,6,1,null,0,0,6,6,5,null,1,null,null,null,null,null,null,null,5,null,5,null,null,5,5,null,5,4,null,0,0,1,null,1,null,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,null,null,null],"name":"dao/concrete/DAOFuncionario.java"},{"source":"package dao.concrete;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport dao.interfaces.IDaoMercadoria;\nimport models.mercadoria.Mercadoria;\nimport models.mercadoria.IMercadoria;\n\npublic class DAOMercadoria implements IDaoMercadoria {\n \n\tprivate static Connection con;\n\tprivate static Statement comando;\n\tprivate String usuario;\n\tprivate String senha;\n\t\n\tpublic DAOMercadoria(){\n\t\tusuario = \"travis\";\n\t\tsenha = \"\";\n\t}\n\tprivate void conectar() {\n\n\t\ttry {\n\t\t\tcon = ConnectMySql.conexao(\"jdbc:mysql://localhost/tes\", usuario,\n\t\t\t\t\tsenha, MySQLDAOFactory.MYSQL);\n\t\t\tcomando = con.createStatement();\n\t\t} catch (ClassNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void criarMercadoria(IMercadoria mercadoria) {\n\n\t\tString insert_mercadoria = \"INSERT INTO mercadoria (nome, preco, cor, tamanho, produto) VALUES (\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ mercadoria.getNome()\n\t\t\t\t+ \"',\"\n\t\t\t\t+ \"\"\n\t\t\t\t+ mercadoria.getPreco()\n\t\t\t\t+ \",\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ mercadoria.getCor()\n\t\t\t\t+ \"',\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ mercadoria.getTamanho()\n\t\t\t\t+ \"',\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ mercadoria.getProduto() + \"');\";\n\t\ttry {\n\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_mercadoria);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tpublic void editarMercadoria(IMercadoria mercadoria) {\n\n\t\tString update_mercadoria = \"UPDATE mercadoria SET \" + \"nome='\"\n\t\t\t\t+ mercadoria.getNome() + \"',preco=\" + mercadoria.getPreco()\n\t\t\t\t+ \",cor='\" + mercadoria.getCor() + \"',tamanho='\"\n\t\t\t\t+ mercadoria.getTamanho() + \"',produto='\"\n\t\t\t\t+ mercadoria.getProduto() + \"' WHERE ID='\" + mercadoria.getID()\n\t\t\t\t+ \"';\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(update_mercadoria);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t\n\tpublic int buscaIdPorNome(String nome){\n\t\tResultSet result = null;\n\t\tint le = -1;\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tresult = comando\n\t\t\t\t\t.executeQuery(\"SELECT * FROM mercadoria WHERE nome = '\" + nome\n\t\t\t\t\t\t\t+ \"';\");\n\t\t\tif (result.next()) {\n\t\t\t\tle=result.getInt(\"ID\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn le;\n\t}\n\n\tpublic void apagarMercadoria(int ID) {\n\n\t\tString remove_mercadoria = \"DELETE FROM mercadoria WHERE ID = '\" + ID\n\t\t\t\t+ \"';\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_mercadoria);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic void apagarTudo(){\n\t\tString remove_mercadoria = \"DELETE FROM mercadoria\"\n\t\t\t\t+ \";\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_mercadoria);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic IMercadoria buscarMercadoria_ID(int ID) {\n\t\tResultSet result = null;\n\t\tMercadoria le = new Mercadoria();\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tresult = comando\n\t\t\t\t\t.executeQuery(\"SELECT * FROM mercadoria WHERE ID = '\" + ID\n\t\t\t\t\t\t\t+ \"';\");\n\t\t\tif (result.next()) {\n\t\t\t\tle.setPreco(result.getDouble(\"preco\"));\n\t\t\t\tle.setNome(result.getString(\"nome\"));\n\t\t\t\tle.setCor(result.getString(\"cor\"));\n\t\t\t\tle.setTamanho(result.getString(\"tamanho\"));\n\t\t\t\tle.setProduto(result.getString(\"produto\"));\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn le;\n\t}\n\n\tpublic List listarMercadorias() {\n\n\t\tconectar();\n\t\tList list_mercadorias = new ArrayList();\n\t\tResultSet result;\n\n\t\ttry {\n\t\t\tresult = comando.executeQuery(\"SELECT * FROM mercadoria\");\n\n\t\t\twhile (result.next()) {\n\t\t\t\tMercadoria le = new Mercadoria();\n\t\t\t\tle.setPreco(result.getDouble(\"preco\"));\n\t\t\t\tle.setNome(result.getString(\"nome\"));\n\t\t\t\tle.setCor(result.getString(\"cor\"));\n\t\t\t\tle.setTamanho(result.getString(\"tamanho\"));\n\t\t\t\tle.setProduto(result.getString(\"produto\"));\n\t\t\t\tlist_mercadorias.add(le);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn list_mercadorias;\n\n\t}\n\n\tpublic int buscarIdMercadoria(int id) {\n\n\t\tResultSet buscarId = null;\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tbuscarId = comando.executeQuery(\"SELECT id\" + \" FROM mercadoria\"\n\t\t\t\t\t+ \" WHERE id=\" + id);\n\t\t\tif (buscarId.next()) {\n\t\t\t\treturn Integer.parseInt(buscarId.getString(\"id\"));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn -1;\n\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21,21,21,21,null,null,null,37,null,37,0,0,0,0,37,37,null,null,null,5,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,0,0,5,null,5,null,null,null,1,null,null,null,null,null,null,1,1,0,0,1,1,null,null,null,null,6,6,null,null,6,6,null,null,6,5,null,null,null,1,null,0,0,5,null,5,null,null,null,null,3,null,null,3,3,0,0,3,3,null,null,8,null,null,8,8,0,0,8,8,null,null,6,6,null,null,6,6,null,null,6,6,6,6,6,6,null,0,null,0,0,6,null,6,null,null,null,null,4,4,null,null,null,4,null,6,2,2,2,2,2,2,2,2,0,0,4,null,4,null,null,null,null,null,4,null,null,4,4,null,4,1,null,0,0,3,null,3,null,null,null,null,null],"name":"dao/concrete/DAOMercadoria.java"},{"source":"package dao.concrete;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport dao.interfaces.IDaoVendas;\nimport models.venda.IVenda;\nimport models.venda.Venda;\n\npublic class DAOVendas implements IDaoVendas {\n\n\tprivate static Connection con;\n\tprivate static Statement comando;\n\tprivate String usuario;\n\tprivate String senha;\n\t\n\tpublic DAOVendas(){\n\t\tusuario = \"travis\";\n\t\tsenha = \"\";\n\t}\n\tprivate void conectar() {\n\n\t\ttry {\n\t\t\tcon = ConnectMySql.conexao(\"jdbc:mysql://localhost/tes\", usuario,\n\t\t\t\t\tsenha, MySQLDAOFactory.MYSQL);\n\t\t\tcomando = con.createStatement();\n\t\t} catch (ClassNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void criarVenda(IVenda venda) {\n\n\t\tString insert_venda = \"INSERT INTO vendas (subtotal, vendedorRg, dataVenda, qtdVendas) VALUES (\"\n\t\t\t\t+ \"\"\n\t\t\t\t+ venda.getSubtotal()\n\t\t\t\t+ \",\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ venda.getVendedorRG()\n\t\t\t\t+ \"',\"\n\t\t\t\t+ \"'\"\n\t\t\t\t+ venda.getDataVenda()\n\t\t\t\t+ \"',\"\n\t\t\t\t+ \"\"\n\t\t\t\t+ venda.getQtdVendas() + \");\";\n\t\ttry {\n\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_venda);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(insert_venda);\n\n\t}\n\n\tpublic void editarVenda(IVenda venda) {\n\n\t\tString insert_venda = \"UPDATE vendas SET \" + \"subtotal=\"\n\t\t\t\t+ venda.getSubtotal() + \",vendedorRg='\" + venda.getVendedorRG()\n\t\t\t\t+ \"',dataVenda='\" + venda.getDataVenda() + \"',qtdVendas=\"\n\t\t\t\t+ venda.getQtdVendas() + \" WHERE id=\" + venda.getID() + \";\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(insert_venda);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void apagarVenda(int id) {\n\n\t\tString remove_venda = \"DELETE FROM vendas WHERE id = \" + id + \";\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_venda);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic void apagarTudo(){\n\t\tString remove_venda = \"DELETE FROM vendas;\";\n\t\ttry {\n\t\t\tconectar();\n\t\t\tcomando.executeUpdate(remove_venda);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic List listarVendas() {\n\n\t\tconectar();\n\t\tList list_vendas = new ArrayList();\n\t\tResultSet result;\n\n\t\ttry {\n\t\t\tresult = comando.executeQuery(\"SELECT * FROM vendas\");\n\n\t\t\twhile (result.next()) {\n\t\t\t\tIVenda le = new Venda();\n\t\t\t\tle.setID((result.getInt(\"id\")));\n\t\t\t\tle.setSubtotal(result.getDouble(\"subtotal\"));\n\t\t\t\tle.setVendedorRG(result.getString(\"vendedorRg\"));\n\t\t\t\tle.setDataVenda(result.getString(\"dataVenda\"));\n\t\t\t\tle.setQtdVendas(result.getInt(\"qtdVendas\"));\n\t\t\t\tlist_vendas.add(le);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn list_vendas;\n\n\t}\n\n\tpublic int buscarVendaPorNome(String data){\n\t\tResultSet result = null;\n\t\tint le = -1;\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tresult = comando.executeQuery(\"SELECT * FROM vendas WHERE dataVenda = '\"\n\t\t\t\t\t+ data + \"';\");\n\t\t\tif (result.next()) {\n\t\t\t\tle = result.getInt(\"id\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn le;\n\t}\n\t\n\tpublic IVenda buscarVenda(int ID) {\n\t\tResultSet result = null;\n\t\tIVenda le = new Venda();\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tresult = comando.executeQuery(\"SELECT * FROM vendas WHERE id = \"\n\t\t\t\t\t+ ID + \";\");\n\t\t\tif (result.next()) {\n\t\t\t\tle.setID((result.getInt(\"id\")));\n\t\t\t\tle.setSubtotal(result.getDouble(\"subtotal\"));\n\t\t\t\tle.setVendedorRG(result.getString(\"vendedorRg\"));\n\t\t\t\tle.setDataVenda(result.getString(\"dataVenda\"));\n\t\t\t\tle.setQtdVendas(result.getInt(\"qtdVendas\"));\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn le;\n\t}\n\n\tpublic int buscarIdVenda(int id) {\n\n\t\tResultSet buscarId = null;\n\n\t\ttry {\n\t\t\tconectar();\n\t\t\tbuscarId = comando.executeQuery(\"SELECT id\" + \" FROM vendas\"\n\t\t\t\t\t+ \" WHERE id=\" + id);\n\t\t\tif (buscarId.next()) {\n\t\t\t\treturn Integer.parseInt(buscarId.getString(\"id\"));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn -1;\n\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19,19,19,19,null,null,null,18,null,18,0,0,0,0,18,18,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,0,0,3,3,null,3,null,null,null,1,null,null,null,null,1,1,0,0,1,1,null,null,null,2,null,2,2,0,0,2,2,null,null,5,null,5,5,0,0,5,5,null,null,null,2,2,null,null,null,2,null,3,1,1,1,1,1,1,1,1,0,0,2,null,2,null,null,null,null,2,2,null,null,2,2,null,2,2,null,null,0,null,0,0,2,null,2,null,null,null,1,1,null,null,1,1,null,1,1,1,1,1,1,null,0,null,0,0,1,null,1,null,null,null,null,2,null,null,2,2,null,2,1,null,0,0,1,null,1,null,null,null,null,null],"name":"dao/concrete/DAOVendas.java"},{"source":"package dao.concrete;\n\npublic class MySQLDAOFactory extends DAOFactory {\n\n\tprivate DAOFuncionario daoFuncionario;\n\tprivate DAOMercadoria daoMercadoria;\n\tprivate DAOVendas daoVendas;\n\t\n\tpublic DAOFuncionario createDAOFuncionario() {\n\t\tdaoFuncionario = new DAOFuncionario();\n\t\treturn daoFuncionario;\n\t}\n\t\n\tpublic DAOMercadoria createDAOMercadoria() {\n\t\tdaoMercadoria = new DAOMercadoria();\n\t\treturn daoMercadoria;\n\t}\n\t\n\tpublic DAOVendas createDAOVendas() {\n\t\tdaoVendas = new DAOVendas();\n\t\treturn daoVendas;\n\t}\n\t\n}","coverage":[null,null,10,null,null,null,null,null,null,10,10,null,null,null,10,10,null,null,null,10,10,null,null,null],"name":"dao/concrete/MySQLDAOFactory.java"},{"source":"package dao.interfaces;\n\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport models.funcionario.IFuncionario;\n\npublic interface IDaoFuncionario {\n\n\tpublic void criarFuncionario(IFuncionario funcionario) throws SQLException ;\n\n\tpublic void editarFuncionario(IFuncionario funcionario);\n\n\tpublic void apagarFuncionario(String rg) throws ClassNotFoundException;\n\n\tpublic List listarFuncionario();\n\n\tpublic void atualizarSalario(IFuncionario funcionario);\n\n\tpublic IFuncionario buscarFuncionario(String rg);\n\n\tpublic int quantidadeVendas(IFuncionario funcionario);\n\n\tpublic String buscarRg(String rg);\n\n\tpublic boolean checaRg(String rg);\n\n\tpublic double buscarSalario(IFuncionario funcionario);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"dao/interfaces/IDaoFuncionario.java"},{"source":"package dao.interfaces;\n\nimport java.util.List;\n\nimport models.mercadoria.IMercadoria;\n\npublic interface IDaoMercadoria {\n\n\tpublic void criarMercadoria(IMercadoria mercadoria);\n\n\tpublic void editarMercadoria(IMercadoria mercadoria);\n\n\tpublic void apagarMercadoria(int ID);\n\n\tpublic IMercadoria buscarMercadoria_ID(int ID);\n\n\tpublic List listarMercadorias();\n\n\tpublic int buscarIdMercadoria(int id);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"dao/interfaces/IDaoMercadoria.java"},{"source":"package dao.interfaces;\n\nimport java.util.List;\n\nimport models.venda.IVenda;\n\npublic interface IDaoVendas {\n\n\tpublic void criarVenda(IVenda venda);\n\n\tpublic void editarVenda(IVenda venda);\n\n\tpublic void apagarVenda(int id);\n\n\tpublic List listarVendas();\n\n\tpublic IVenda buscarVenda(int ID);\n\n\tpublic int buscarIdVenda(int id);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"dao/interfaces/IDaoVendas.java"},{"source":"package exceptions;\n\npublic class DaoException extends Exception {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n}\n","coverage":[null,null,0,null,null,null,null,null,null,null,null],"name":"exceptions/DaoException.java"},{"source":"package exceptions;\n\npublic class OpcaoIlegalException extends Exception {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n}\n","coverage":[null,null,0,null,null,null,null,null,null,null,null],"name":"exceptions/OpcaoIlegalException.java"},{"source":"package facade;\n\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport models.funcionario.IFuncionario;\nimport models.mercadoria.IMercadoria;\nimport models.venda.IVenda;\nimport dao.concrete.DAOFactory;\nimport dao.interfaces.IDaoFuncionario;\nimport dao.interfaces.IDaoMercadoria;\nimport dao.interfaces.IDaoVendas;\n\npublic class Facade {\n\n\tprivate IDaoFuncionario iDaoFuncionario;\n\tprivate IDaoMercadoria iDaoMercadoria;\n\tprivate IDaoVendas iDaoVendas;\n\tprivate DAOFactory DaoFactory;\n\n\tpublic Facade(int whichFactory) {\n\t\tthis.DaoFactory = DAOFactory.createDAOFactory(whichFactory);\n\t\tthis.iDaoMercadoria = this.DaoFactory.createDAOMercadoria();\n\t\tthis.iDaoFuncionario = this.DaoFactory.createDAOFuncionario();\n\t\tthis.iDaoVendas = this.DaoFactory.createDAOVendas();\n\t}\n\n\tpublic void criarFuncionario(IFuncionario funcionario) {\n\t\ttry {\n\t\t\tiDaoFuncionario.criarFuncionario(funcionario);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void editarFuncionario(IFuncionario funcionario) {\n\t\tiDaoFuncionario.editarFuncionario(funcionario);\n\t}\n\n\tpublic double buscarSalario(IFuncionario funcionario) {\n\t\treturn iDaoFuncionario.buscarSalario(funcionario);\n\t}\n\n\tpublic int quantidadeVendas(IFuncionario funcionario) {\n\t\treturn iDaoFuncionario.quantidadeVendas(funcionario);\n\t}\n\n\tpublic void atualizarSalario(IFuncionario funcionario) {\n\t\tiDaoFuncionario.atualizarSalario(funcionario);\n\t}\n\n\tpublic String buscarRg(String rg) {\n\t\treturn iDaoFuncionario.buscarRg(rg);\n\t}\n\n\tpublic int buscarIdVenda(int id) {\n\t\treturn iDaoVendas.buscarIdVenda(id);\n\t}\n\n\tpublic void apagarFuncionario(String rg) {\n\t\ttry {\n\t\t\tiDaoFuncionario.apagarFuncionario(rg);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void apagarFuncionario(IFuncionario funcionario) {\n\t\ttry {\n\t\t\tiDaoFuncionario.apagarFuncionario(funcionario.getRg());\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic List listarFuncionarios() {\n\t\treturn iDaoFuncionario.listarFuncionario();\n\t}\n\n\tpublic IFuncionario buscarFuncionario(String rg) {\n\t\treturn iDaoFuncionario.buscarFuncionario(rg);\n\t}\n\n\tpublic void criarMercadoria(IMercadoria mercadoria) {\n\t\tiDaoMercadoria.criarMercadoria(mercadoria);\n\t}\n\n\tpublic void editarMercadoria(IMercadoria mercadoria) {\n\t\tiDaoMercadoria.editarMercadoria(mercadoria);\n\t}\n\n\tpublic void apagarMercadoria(int ID) {\n\t\tiDaoMercadoria.apagarMercadoria(ID);\n\t}\n\n\tpublic void apagarMercadoria(IMercadoria mercadoria) {\n\t\tiDaoMercadoria.apagarMercadoria(mercadoria.getID());\n\t}\n\n\tpublic List listarMercadorias() {\n\t\treturn iDaoMercadoria.listarMercadorias();\n\t}\n\n\tpublic IMercadoria buscarMercadoria(int ID) {\n\t\treturn iDaoMercadoria.buscarMercadoria_ID(ID);\n\t}\n\n\tpublic void criarVenda(IVenda venda) {\n\t\tiDaoVendas.criarVenda(venda);\n\t}\n\n\tpublic void editarVenda(IVenda venda) {\n\t\tiDaoVendas.editarVenda(venda);\n\t}\n\n\tpublic void apagarVenda(int id) {\n\t\tiDaoVendas.apagarVenda(id);\n\t}\n\n\tpublic void apagarVenda(IVenda venda) {\n\t\tiDaoVendas.apagarVenda(venda.getID());\n\t}\n\n\tpublic List listarVendas() {\n\t\treturn iDaoVendas.listarVendas();\n\t}\n\n\tpublic IVenda buscarVenda(int ID) {\n\t\treturn iDaoVendas.buscarVenda(ID);\n\t}\n\n\tpublic int buscarIdMercadoria(int id) {\n\t\treturn iDaoMercadoria.buscarIdMercadoria(id);\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,10,10,10,10,10,10,null,null,null,3,0,null,0,3,3,null,null,1,1,null,null,2,null,null,null,0,null,null,null,1,1,null,null,1,null,null,null,2,null,null,null,null,2,0,null,0,2,2,null,null,null,1,0,null,0,1,1,null,null,4,null,null,null,1,null,null,null,3,3,null,null,1,1,null,null,1,1,null,null,1,1,null,null,2,null,null,null,2,null,null,null,3,3,null,null,1,1,null,null,1,1,null,null,1,1,null,null,2,null,null,null,1,null,null,null,2,null,null,null,null],"name":"facade/Facade.java"},{"source":"package gui;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport models.funcionario.Funcionario;\nimport models.funcionario.IFuncionario;\nimport models.mercadoria.IMercadoria;\nimport models.mercadoria.Mercadoria;\nimport models.venda.IVenda;\nimport models.venda.Venda;\nimport exceptions.OpcaoIlegalException;\nimport facade.Facade;\n\n@SuppressWarnings(\"rawtypes\")\npublic class Main {\n\n\tprivate Facade facade;\n\tprivate Scanner in;\n\tprivate int opcao;\n\tprivate String rg;\n\tprivate String cpf;\n\tprivate String data;\n\tprivate IFuncionario funcionario;\n\tprivate IMercadoria mercadoria;\n\tprivate IVenda venda;\n\tprivate List listFuncionarios;\n\tprivate List listVendas;\n\tprivate List listMercadorias;\n\n\tpublic Main() {\n\t\tfacade = new Facade(0);\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t/*\n\t * PARTE RELACIONADA A FUNCIONARIO\n\t */\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\tpublic void CadastrarFuncionario() {\n\n\t\tSystem.out.println(\"Carregando tela Cadastro Funcionario:\");\n\n\t\tfuncionario = new Funcionario();\n\t\tString buscaRg = null;\n\n\t\t// coleta dados\n\n\t\tboolean cadastrado = false;\n\n\t\tdo {\n\t\t\trg = setRg();\n\t\t\tbuscaRg = facade.buscarRg(rg);\n\n\t\t\tif (buscaRg == null || buscaRg.equals(\"\")) {\n\t\t\t\tString nome = funcionarioNome();\n\t\t\t\tcpf = setCPF();\n\t\t\t\tString dataNascimento = setData();\n\t\t\t\tString cargo = funcionarioCargo();\n\t\t\t\tdouble salario = funcionarioSalario();\n\n\t\t\t\t// seta o funcionario\n\t\t\t\tfuncionario.setNome(nome);\n\t\t\t\tfuncionario.setRg(rg);\n\t\t\t\tfuncionario.setCpf(cpf);\n\t\t\t\tfuncionario.setDataNascimento(dataNascimento);\n\t\t\t\tfuncionario.setCargo(cargo);\n\t\t\t\tfuncionario.setSalario(salario);\n\n\t\t\t\ttry {\n\t\t\t\t\t// tenta adicionar ao banco\n\t\t\t\t\tSystem.out.println(\"Aguarde enquanto tentamos cadastrar.\");\n\t\t\t\t\tfacade.criarFuncionario(funcionario);\n\t\t\t\t\tcadastrado = true;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"O Rg já existe no banco de dados\");\n\t\t\t}\n\t\t} while (!cadastrado);\n\t}\n\n\tprivate void MenuFuncionarios() throws OpcaoIlegalException {\n\n\t\topcao = -1;\n\t\tboolean voltar = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!voltar) {\n\t\t\tSystem.out.println(\"~~~~~ Menu Funcionarios ~~~~~\");\n\t\t\tSystem.out.println(\"O que gostaria de fazer?\");\n\t\t\tSystem.out.println(\"0 - Voltar\");\n\t\t\tSystem.out.println(\"1 - Cadastrar Novo Funcionario\");\n\t\t\tSystem.out.println(\"2 - Atualizar Salario\");\n\t\t\tSystem.out.println(\"3 - Calcular Bonificacao\");\n\t\t\tSystem.out.println(\"4 - Remover Funcionario\");\n\t\t\tSystem.out.println(\"5 - Listar Funcionarios\");\n\t\t\tSystem.out.println(\"6 - Buscar Funcionario\");\n\t\t\tSystem.out.println(\"7 - Editar funcionario\");\n\t\t\tSystem.out.println(\"8 - Reajuste salarial\");\n\n\t\t\topcao = in.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 0:\n\t\t\t\tMenuPrincipal();\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tCadastrarFuncionario();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tAtualizarSalario();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(CalcularBonificacao());\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tRemoverFuncionario();\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tListarFuncionarios();\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tBuscarFuncionario();\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tEditarFuncionario();\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tReajusteSalarial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new OpcaoIlegalException();\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\t}\n\n\tprivate void ReajusteSalarial() {\n\n\t\tlistFuncionarios = new ArrayList();\n\t\tFuncionario aux;\n\n\t\tlistFuncionarios = facade.listarFuncionarios();\n\n\t\tif (listFuncionarios.size() > 0) {\n\n\t\t\tfor (int i = 0; i < listFuncionarios.size(); i++) {\n\t\t\t\taux = (Funcionario) listFuncionarios.get(i);\n\t\t\t\taux.setSalario(QuantificarReajuste(aux));\n\t\t\t\tfacade.atualizarSalario(aux);\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Nao ha funcionarios cadastrados no sistema\");\n\t\t}\n\n\t}\n\n\tpublic double QuantificarReajuste(IFuncionario funcionario) {\n\t\tdouble pCaixa = 0.05;\n\t\tdouble pEstoquista = 0.05;\n\t\tdouble pGerente = 0.09;\n\t\tdouble pVendedor = 0.07;\n\t\tdouble novoSalario = 0;\n\n\t\tif (funcionario.getCargo().equals(\"Caixa\")) {\n\t\t\tnovoSalario = funcionario.getSalario() + funcionario.getSalario()\n\t\t\t\t\t* pCaixa;\n\t\t} else if (funcionario.getCargo().equals(\"Estoquista\")) {\n\t\t\tnovoSalario = funcionario.getSalario() + funcionario.getSalario()\n\t\t\t\t\t* pEstoquista;\n\t\t} else if (funcionario.getCargo().equals(\"Gerente\")) {\n\t\t\tnovoSalario = funcionario.getSalario() + funcionario.getSalario()\n\t\t\t\t\t* pGerente;\n\t\t} else {\n\t\t\tnovoSalario = funcionario.getSalario() + funcionario.getSalario()\n\t\t\t\t\t* pVendedor;\n\t\t}\n\n\t\treturn novoSalario;\n\t}\n\n\tprivate void EditarFuncionario() {\n\n\t\tSystem.out.println(\"Carregando tela Editar Funcionario:\");\n\t\tfuncionario = new Funcionario();\n\t\tString buscaRg, nome = null, rg = null, cpf = null, cargo = null, dataNascimento = null;\n\t\tdouble salario = -1;\n\t\tboolean editado = false;\n\n\t\tdo {\n\t\t\tSystem.out.println(\"Informe o rg do funcionario\");\n\t\t\trg = setRg();\n\t\t\tbuscaRg = facade.buscarRg(rg);\n\n\t\t\tif (buscaRg != null) {\n\t\t\t\t// coleta dados\n\t\t\t\tSystem.out.println(\"Informe o novo nome\");\n\t\t\t\tnome = funcionarioNome();\n\t\t\t\tSystem.out.println(\"Informe o novo rg\");\n\t\t\t\trg = setRg();\n\t\t\t\tSystem.out.println(\"Informe o novo cpf\");\n\t\t\t\tcpf = setCPF();\n\t\t\t\tSystem.out.println(\"Informe a nova data de nascimento\");\n\t\t\t\tdataNascimento = setData();\n\t\t\t\tSystem.out.println(\"Informe o novo cargo\");\n\t\t\t\tcargo = funcionarioCargo();\n\t\t\t\tSystem.out.println(\"Informe o novo salário\");\n\t\t\t\tsalario = funcionarioSalario();\n\t\t\t\teditado = true;\n\t\t\t} else {\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Usuário não cadastrado no sistema, informa outro RG\");\n\t\t\t}\n\t\t} while (!editado);\n\n\t\t// seta o funcionario\n\t\tfuncionario.setNome(nome);\n\t\tfuncionario.setRg(rg);\n\t\tfuncionario.setCpf(cpf);\n\t\tfuncionario.setDataNascimento(dataNascimento);\n\t\tfuncionario.setCargo(cargo);\n\t\tfuncionario.setSalario(salario);\n\n\t\t// tenta adicionar ao banco\n\t\tSystem.out.println(\"Aguarde enquanto editamos funcionario.\");\n\t\tfacade.editarFuncionario(funcionario);\n\n\t}\n\n\tprivate void BuscarFuncionario() {\n\n\t\tfuncionario = new Funcionario();\n\t\tFuncionario aux;\n\t\tString buscaRg = null;\n\t\tboolean achouFuncionario = false;\n\t\tdo {\n\t\t\trg = setRg();\n\t\t\tbuscaRg = facade.buscarRg(rg);\n\n\t\t\tif (buscaRg != null) {\n\t\t\t\t// seta o funcionario\n\t\t\t\tfuncionario.setRg(rg);\n\n\t\t\t\taux = (Funcionario) facade.buscarFuncionario(rg);\n\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Nome|RG|CPF|DataNascimento|Cargo|Salario \\n \\n\");\n\n\t\t\t\tSystem.out.print(aux.getNome() + \"   \");\n\t\t\t\tSystem.out.print(aux.getRg() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCpf() + \"   \");\n\t\t\t\tSystem.out.print(aux.getDataNascimento() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCargo() + \"   \");\n\t\t\t\tSystem.out.print(aux.getSalario() + \"\\n\");\n\t\t\t} else {\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Funcionario nao encontrado, tente outro RG\");\n\t\t\t}\n\t\t} while (!achouFuncionario);\n\t}\n\n\tprivate void ListarFuncionarios() {\n\n\t\tList listFuncionarios = new ArrayList();\n\t\tFuncionario aux;\n\n\t\tlistFuncionarios = facade.listarFuncionarios();\n\n\t\tif (listFuncionarios.size() > 0) {\n\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"Nome|RG|CPF|DataNascimento|Cargo|Salario \\n \\n\");\n\n\t\t\tfor (int i = 0; i < listFuncionarios.size(); i++) {\n\t\t\t\taux = (Funcionario) listFuncionarios.get(i);\n\t\t\t\tSystem.out.print(aux.getNome() + \"   \");\n\t\t\t\tSystem.out.print(aux.getRg() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCpf() + \"   \");\n\t\t\t\tSystem.out.print(aux.getDataNascimento() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCargo() + \"   \");\n\t\t\t\tSystem.out.println(aux.getSalario() + \"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Nao ha funcionarios cadastrados no sistema\");\n\t\t}\n\n\t}\n\n\tpublic boolean RemoverFuncionario() {\n\n\t\tSystem.out.println(\"Carregando tela Remover Funcionario:\");\n\n\t\tfuncionario = new Funcionario();\n\t\tString buscaRg = null;\n\n\t\t// coleta dados\n\t\trg = setRg();\n\t\tbuscaRg = facade.buscarRg(rg);\n\n\t\tif (buscaRg != null) {\n\n\t\t\t// seta o funcionario\n\t\t\tfuncionario.setRg(rg);\n\n\t\t\t// tenta adicionar ao banco\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"Aguarde enquanto removemos o usuario do sistema.\");\n\t\t\tfacade.apagarFuncionario(funcionario);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate double CalcularBonificacao() {\n\n\t\tdouble salario;\n\t\tdouble bonificacao = -1;\n\t\tString buscaRg = null;\n\t\tboolean calculou = false;\n\n\t\tSystem.out.println(\"Carregando tela Calcular Bonificacao:\");\n\n\t\tfuncionario = new Funcionario();\n\n\t\tdo {\n\t\t\t// coleta dados\n\t\t\trg = setRg();\n\t\t\t// seta o funcionario;\n\t\t\tfuncionario.setRg(rg);\n\t\t\tbuscaRg = facade.buscarRg(rg);\n\n\t\t\tif (buscaRg != null) {\n\n\t\t\t\t// tenta adicionar ao banco\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Aguarde enquanto tentamos calcular a bonificacao.\");\n\t\t\t\tSystem.out.println(\"Quantidade de vendas:\"\n\t\t\t\t\t\t+ facade.quantidadeVendas(funcionario));\n\t\t\t\tsalario = facade.buscarSalario(funcionario);\n\t\t\t\tbonificacao = salario + salario\n\t\t\t\t\t\t* (0.01 * facade.quantidadeVendas(funcionario));\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"RG invalido\");\n\t\t\t}\n\t\t} while (!calculou);\n\n\t\treturn bonificacao;\n\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tprivate double CalcularReajuste(String rg) {\n\n\t\tdouble novoSalario = 0;\n\n\t\tfuncionario = new Funcionario();\n\n\t\tfuncionario = facade.buscarFuncionario(rg);\n\t\tif (funcionario != null) {\n\t\t\tnovoSalario = QuantificarReajuste(funcionario);\n\t\t}\n\t\treturn novoSalario;\n\n\t}\n\n\tprivate void AtualizarSalario() {\n\n\t\tSystem.out.println(\"Carregando tela Atualizar Salario:\");\n\n\t\tfuncionario = new Funcionario();\n\t\tdouble salarioAtual = -1;\n\t\tboolean aumento = false;\n\t\tboolean rgValido = false;\n\n\t\t// coleta dados\n\t\tdo {\n\t\t\trg = setRg();\n\t\t\tString buscaRg = facade.buscarRg(rg);\n\n\t\t\tif (buscaRg == null || buscaRg.equals(\"\")) {\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"RG invalido. Digite o RG de um funcionario ja cadastrado.\");\n\t\t\t} else {\n\t\t\t\trgValido = true;\n\t\t\t}\n\t\t} while (!rgValido);\n\n\t\tsalarioAtual = facade.buscarSalario(funcionario);\n\n\t\tdo {\n\t\t\tdouble novoSalario = funcionarioSalario();\n\t\t\tif (novoSalario > salarioAtual) {\n\t\t\t\tfuncionario.setSalario(novoSalario);\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Aguarde enquanto tentamos atualizar o salario.\");\n\t\t\t\tfacade.atualizarSalario(funcionario);\n\t\t\t\taumento = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"O novo salario deve ser maior que o atual\");\n\t\t\t}\n\t\t} while (!aumento);\n\n\t}\n\n\tprivate String funcionarioNome() {\n\n\t\tString Nome = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite nome do funcionario:\");\n\t\t\t\tNome = in.next();\n\t\t\t\tif (!(Nome.equals(\"\"))) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Nome = \" + Nome + \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Nome confirmado.\");\n\n\t\t\t\t\treturn Nome;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn Nome;\n\t}\n\n\tprivate String setRg() {\n\t\tString RG = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tString resposta;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!confirma) { // enquanto o usuario nao confirmar\n\t\t\tvalido = false;\n\t\t\twhile (!valido) { // enquanto o RG nao for valido\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Digite RG do funcionario (nove digitos sem ponto):\");\n\t\t\t\tRG = in.next();\n\t\t\t\tif (RG.length() == 9) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"RG = \" + RG + \"\\nTem certeza? (s/n)\");\n\t\t\tresposta = in.next();\n\t\t\tif (resposta.equals(\"s\") || resposta.equals(\"S\")) {\n\t\t\t\tconfirma = true;\n\t\t\t\treturn RG;\n\t\t\t} else {\n\t\t\t\tconfirma = false;\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn RG;\n\t}\n\n\tprivate String setCPF() {\n\t\tString CPF = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\t\tString resposta;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!confirma) { // enquanto o usuario nao confirmar\n\t\t\tvalido = false;\n\t\t\twhile (!valido) { // enquanto o CPF nao for valido\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Digite CPF do funcionario (onze digitos sem ponto e sem hifen):\");\n\t\t\t\tCPF = in.next();\n\t\t\t\tif (CPF.length() == 11) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"CPF = \" + CPF + \"\\nTem certeza? (s/n)\");\n\t\t\tresposta = in.next();\n\t\t\tif (resposta.equals(\"s\") || resposta.equals(\"S\")) {\n\t\t\t\tconfirma = true;\n\t\t\t\treturn CPF;\n\t\t\t} else {\n\t\t\t\tconfirma = false;\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn CPF;\n\t}\n\n\tprivate String setData() {\n\t\tdata = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tString resposta;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!confirma) { // enquanto o usuario nao confirmar\n\t\t\tvalido = false;\n\t\t\twhile (!valido) { // enquanto o CPF nao for valido\n\t\t\t\tSystem.out.println(\"Informe a data (DD/MM/AAAA)\");\n\t\t\t\tdata = in.next();\n\t\t\t\tif (data.length() == 10) { // se tem o tamanho certo\n\t\t\t\t\tint[] dataInt = quebraData(data); // quebra a linha\n\t\t\t\t\tif ((dataInt.length == 3) && (checaData(dataInt))) { // se\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// esta\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// no\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// formato\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// certo\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// eh\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// uma\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// data\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// valida\n\t\t\t\t\t\tvalido = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Data de Nascimento = \" + data\n\t\t\t\t\t+ \"\\nTem certeza? (s/n)\");\n\t\t\tresposta = in.next();\n\t\t\tif (resposta.equals(\"s\") || resposta.equals(\"S\")) {\n\t\t\t\tconfirma = true;\n\t\t\t\treturn data;\n\t\t\t} else {\n\t\t\t\tconfirma = false;\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn data;\n\t}\n\n\tprivate int[] quebraData(String dataString) {\n\t\tString[] aux = dataString.split(\"/\");\n\t\tint[] dataInt = new int[3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tdataInt[i] = Integer.parseInt(aux[i]);\n\n\t\t}\n\t\treturn dataInt;\n\t}\n\n\tprivate boolean checaData(int[] dataInt) {\n\t\tint dia = dataInt[0];\n\t\tint mes = dataInt[1];\n\t\tint ano = dataInt[2];\n\t\tboolean bissexto = false;\n\t\tif (ano >= 1896 && ano <= 2020) { // se for um ano v�lido\n\t\t\tif (((ano % 4 == 0) && (ano % 100 != 0)) || (ano % 400 == 0)) { // se\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bissexto\n\t\t\t\tbissexto = true;\n\t\t\t}\n\n\t\t\tif (mes >= 1 && mes <= 12) { // se for um mes valido\n\n\t\t\t\tif (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8\n\t\t\t\t\t\t|| mes == 10 || mes == 12) { // se for um mes com 31\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// dias\n\t\t\t\t\tif (dia >= 1 && dia <= 31) { // se tiver 31 dias\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else\n\n\t\t\t\tif (mes == 4 || mes == 6 || mes == 9 || mes == 11) { // se for\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// um\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// mes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// com\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 30\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// dias\n\t\t\t\t\tif (dia >= 1 && dia <= 30) { // se tiver ate 30 dias\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else\n\n\t\t\t\tif (mes == 2) { // se for o mes 2\n\t\t\t\t\tif (bissexto) { // se for bissexto\n\t\t\t\t\t\tif (dia >= 1 && dia <= 29) { // se tem ate 29 dias\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // se nao for bissexto\n\t\t\t\t\t\tif (dia >= 1 && dia <= 28) { // se tem ate 28 dias\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate String funcionarioCargo() {\n\t\tString cargo = null;\n\t\tint opcao = 0;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\t\tString resposta;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!confirma) { // enquanto o usuario nao confirmar\n\t\t\tvalido = false;\n\t\t\tSystem.out.println(\"Selecione cargo do funcionario:\");\n\t\t\twhile (!valido) { // enquanto o Cargo nao for valido\n\t\t\t\tSystem.out.println(\"1-Caixa\");\n\t\t\t\tSystem.out.println(\"2-Estoquista\");\n\t\t\t\tSystem.out.println(\"3-Gerente\");\n\t\t\t\tSystem.out.println(\"4-Vendedor\");\n\t\t\t\topcao = in.nextInt();\n\t\t\t\tswitch (opcao) {\n\t\t\t\tcase 1:\n\t\t\t\t\tcargo = \"Caixa\";\n\t\t\t\t\tvalido = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tcargo = \"Estoquista\";\n\t\t\t\t\tvalido = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcargo = \"Gerente\";\n\t\t\t\t\tvalido = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tcargo = \"Vendedor\";\n\t\t\t\t\tvalido = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t.println(\"Comando invalido.\\nPor favor responda \\\"1\\\", \\\"2\\\", \\\"3\\\" ou \\\"4\\\".\\n\\n\");\n\t\t\t\t\tvalido = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Cargo = \" + cargo + \"\\nTem certeza? (s/n)\");\n\t\t\tresposta = in.next();\n\t\t\tif (resposta.equals(\"s\") || resposta.equals(\"S\")) {\n\t\t\t\tconfirma = true;\n\t\t\t\treturn cargo;\n\t\t\t} else {\n\t\t\t\tconfirma = false;\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn cargo;\n\t}\n\n\tprivate double funcionarioSalario() {\n\n\t\tdouble salario = -1;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\t\tString resposta;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!confirma) { // enquanto o usuario nao confirmar\n\t\t\tvalido = false;\n\t\t\twhile (!valido) { // enquanto o Salario nao for valido\n\t\t\t\tSystem.out.println(\"Digite salario do funcionario:\");\n\t\t\t\tsalario = in.nextDouble();\n\t\t\t\tif (salario > 0) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Salario = \" + salario + \"\\nTem certeza? (s/n)\");\n\t\t\tresposta = in.next();\n\t\t\tif (resposta.equals(\"s\") || resposta.equals(\"S\")) {\n\t\t\t\tconfirma = true;\n\t\t\t\treturn salario;\n\t\t\t} else {\n\t\t\t\tconfirma = false;\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn salario;\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t/*\n\t * PARTE RELACIONADA A MERCADORIA\n\t */\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tprivate void MenuMercadoria() throws OpcaoIlegalException {\n\n\t\topcao = -1;\n\t\tboolean voltar = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!voltar) {\n\t\t\tSystem.out.println(\"~~~~~ Menu Mercadorias ~~~~~\");\n\t\t\tSystem.out.println(\"O que gostaria de fazer?\");\n\t\t\tSystem.out.println(\"0 - Voltar\");\n\t\t\tSystem.out.println(\"1 - Cadastrar Nova Mercadoria\");\n\t\t\tSystem.out.println(\"2 - Apagar mercadoria\");\n\t\t\tSystem.out.println(\"3 - Buscar mercadoria\");\n\t\t\tSystem.out.println(\"4 - Listar mercadorias\");\n\n\t\t\topcao = in.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 0:\n\t\t\t\tMenuPrincipal();\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tCadastrarMercadoria();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tApagarMercadoria();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tBuscarMercadoria();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tListarMercadorias();\n\t\t\tdefault:\n\t\t\t\tthrow new OpcaoIlegalException();\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\t}\n\n\tprivate void ListarMercadorias() {\n\n\t\tlistMercadorias = new ArrayList();\n\t\tMercadoria aux;\n\n\t\tlistMercadorias = facade.listarMercadorias();\n\n\t\tif (listMercadorias.size() > 0) {\n\n\t\t\tSystem.out.println(\"ID|Nome|Preco|Cor|Tamanho|Produto \\n \\n\");\n\n\t\t\tfor (int i = 0; i < listMercadorias.size(); i++) {\n\t\t\t\taux = (Mercadoria) listMercadorias.get(i);\n\t\t\t\tSystem.out.print(aux.getID() + \"   \");\n\t\t\t\tSystem.out.print(aux.getNome() + \"   \");\n\t\t\t\tSystem.out.print(aux.getPreco() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCor() + \"   \");\n\t\t\t\tSystem.out.print(aux.getTamanho() + \"   \");\n\t\t\t\tSystem.out.println(aux.getProduto() + \"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Nao ha mercadorias cadastradas\");\n\t\t}\n\n\t}\n\n\tprivate void BuscarMercadoria() {\n\n\t\tMercadoria aux;\n\t\tin = new Scanner(System.in);\n\t\tint buscarId = -1;\n\t\tboolean achou = false;\n\n\t\tdo {\n\t\t\tSystem.out.println(\"Informe o id da mercadoria\");\n\t\t\tint id = in.nextInt();\n\t\t\tbuscarId = facade.buscarIdMercadoria(id);\n\n\t\t\tif (buscarId == id) {\n\t\t\t\taux = (Mercadoria) facade.buscarMercadoria(id);\n\t\t\t\tSystem.out.println(\"ID|Nome|Preco|Cor|Tamanho|Produto \\n\");\n\t\t\t\tSystem.out.print(aux.getID() + \"   \");\n\t\t\t\tSystem.out.print(aux.getNome() + \"   \");\n\t\t\t\tSystem.out.print(aux.getPreco() + \"   \");\n\t\t\t\tSystem.out.print(aux.getCor() + \"   \");\n\t\t\t\tSystem.out.print(aux.getProduto() + \"   \");\n\t\t\t\tachou = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Mercadoria nao cadastrada\");\n\t\t\t}\n\t\t} while (!achou);\n\n\t}\n\n\tprivate void ApagarMercadoria() {\n\n\t\tSystem.out.println(\"Carregando tela Apagar mercadoria:\");\n\n\t\tin = new Scanner(System.in);\n\t\tint buscarId = -1;\n\t\tboolean apagou = false;\n\n\t\tdo {\n\t\t\t// coleta dados\n\t\t\tSystem.out.println(\"Informe o id da mercadoria\");\n\t\t\tint id = in.nextInt();\n\n\t\t\tbuscarId = facade.buscarIdMercadoria(id);\n\n\t\t\tif (buscarId == id) {\n\t\t\t\t// tenta apagar do banco\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Aguarde enquanto removemos a mercadoria do sistema.\");\n\t\t\t\tfacade.apagarMercadoria(id);\n\t\t\t\tapagou = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Mercadoria nao encontrada\");\n\t\t\t}\n\t\t} while (!apagou);\n\n\t}\n\n\tprivate void CadastrarMercadoria() {\n\n\t\tSystem.out.println(\"Carregando tela Cadastro Mercadoria:\");\n\n\t\tmercadoria = new Mercadoria();\n\n\t\t// coleta dados\n\t\tString nome = mercadoriaNome();\n\t\tdouble preco = mercadoriaPreco();\n\t\tString cor = mercadoriaCor();\n\t\tString tamanho = mercadoriaTamanho();\n\t\tString produto = mercadoriaProduto();\n\n\t\t// seta a mercadoria\n\t\tmercadoria.setNome(nome);\n\t\tmercadoria.setPreco(preco);\n\t\tmercadoria.setCor(cor);\n\t\tmercadoria.setTamanho(tamanho);\n\t\tmercadoria.setProduto(produto);\n\n\t\t// tenta adicionar ao banco\n\t\tSystem.out.println(\"Aguarde enquanto tentamos cadastrar.\");\n\t\tfacade.criarMercadoria(mercadoria);\n\n\t}\n\n\tprivate String mercadoriaProduto() {\n\n\t\tString produto = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite nome do produto:\");\n\t\t\t\tproduto = in.next();\n\t\t\t\tif (!(produto.equals(\"\"))) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Produto = \" + produto\n\t\t\t\t\t\t+ \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Nome confirmado.\");\n\t\t\t\t\treturn produto;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn produto;\n\t}\n\n\tprivate String mercadoriaTamanho() {\n\n\t\tString tamanho = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite o tamanho da mercadoria:\");\n\t\t\t\ttamanho = in.next();\n\t\t\t\tif ((tamanho.equalsIgnoreCase(\"P\"))\n\t\t\t\t\t\t|| (tamanho.equalsIgnoreCase(\"M\"))\n\t\t\t\t\t\t|| (tamanho.equalsIgnoreCase(\"G\"))\n\t\t\t\t\t\t|| (tamanho.equalsIgnoreCase(\"GG\"))) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Tamanho = \" + tamanho\n\t\t\t\t\t\t+ \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Tamanho confirmado.\");\n\t\t\t\t\treturn tamanho;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn tamanho;\n\n\t}\n\n\tprivate String mercadoriaCor() {\n\n\t\tString cor = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Informe a cor da mercadoria:\");\n\t\t\t\tcor = in.next();\n\t\t\t\tif (!(cor.equals(\"\"))) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Cor = \" + cor + \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Cor confirmada.\");\n\t\t\t\t\treturn cor;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn cor;\n\t}\n\n\tprivate double mercadoriaPreco() {\n\n\t\tdouble preco = -1.0;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite o preco da mercadoria:\");\n\t\t\t\tpreco = in.nextDouble();\n\t\t\t\tif (!(preco > 0.0)) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Preco = \" + preco + \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Preco confirmado.\");\n\t\t\t\t\treturn preco;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn preco;\n\n\t}\n\n\tprivate String mercadoriaNome() {\n\n\t\tString Nome = null;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite o nome da mercadoria:\");\n\t\t\t\tNome = in.next();\n\t\t\t\tif (!(Nome.equals(\"\"))) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Nome = \" + Nome + \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Nome confirmado.\");\n\t\t\t\t\treturn Nome;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn Nome;\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t/*\n\t * PARTE RELACIONADA A VENDAS\n\t */\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tprivate void MenuVendas() throws OpcaoIlegalException {\n\n\t\topcao = -1;\n\t\tboolean voltar = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!voltar) {\n\t\t\tSystem.out.println(\"~~~~~ Menu Vendas ~~~~~\");\n\t\t\tSystem.out.println(\"O que gostaria de fazer?\");\n\t\t\tSystem.out.println(\"0 - Voltar\");\n\t\t\tSystem.out.println(\"1 - Efetuar Venda\");\n\t\t\tSystem.out.println(\"2 - Editar Venda\");\n\t\t\tSystem.out.println(\"3 - Apagar Venda\");\n\t\t\tSystem.out.println(\"4 - Buscar Venda\");\n\t\t\tSystem.out.println(\"5 - Listar Vendas\");\n\n\t\t\topcao = in.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 0:\n\t\t\t\tMenuPrincipal();\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tCadastrarVenda();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tEditarVenda();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tApagarVenda();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tBuscarVenda();\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tListarVendas();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new OpcaoIlegalException();\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\t}\n\n\tprivate void ListarVendas() {\n\n\t\tlistVendas = new ArrayList();\n\t\tVenda aux;\n\n\t\tlistVendas = facade.listarVendas();\n\n\t\tif (listVendas.size() > 0) {\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"ID|Subtotal|VendedorRg|DataVenda|Qtd Vendas \\n \\n\");\n\n\t\t\tfor (int i = 0; i < listVendas.size(); i++) {\n\t\t\t\taux = (Venda) listVendas.get(i);\n\t\t\t\tSystem.out.print(aux.getID() + \"   \");\n\t\t\t\tSystem.out.print(aux.getSubtotal() + \"   \");\n\t\t\t\tSystem.out.print(aux.getVendedorRG() + \"   \");\n\t\t\t\tSystem.out.print(aux.getDataVenda() + \"   \");\n\t\t\t\tSystem.out.print(aux.getQtdVendas() + \"   \" + \"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Nao ha mercadorias cadastradas\");\n\t\t}\n\n\t}\n\n\tprivate void BuscarVenda() {\n\n\t\tVenda aux;\n\t\tint buscarId = -1;\n\t\tint id;\n\t\tboolean idValido = false;\n\n\t\tdo {\n\t\t\tin = new Scanner(System.in);\n\t\t\tSystem.out.println(\"Informe o id da venda\");\n\t\t\tid = in.nextInt();\n\t\t\tbuscarId = facade.buscarIdVenda(id);\n\t\t\tif (id == buscarId) {\n\t\t\t\taux = (Venda) facade.buscarVenda(id);\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"ID|Subtotal|VendedorRg|DataVenda|Qtd Vendas \\n \\n\");\n\t\t\t\tSystem.out.print(aux.getID() + \"   \");\n\t\t\t\tSystem.out.print(aux.getSubtotal() + \"   \");\n\t\t\t\tSystem.out.print(aux.getVendedorRG() + \"   \");\n\t\t\t\tSystem.out.print(aux.getDataVenda() + \"   \");\n\t\t\t\tSystem.out.print(aux.getQtdVendas() + \"   \");\n\t\t\t\tidValido = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Id inválido\");\n\t\t\t}\n\t\t} while (!idValido);\n\t}\n\n\tprivate void ApagarVenda() {\n\n\t\tSystem.out.println(\"Carregando tela Remover Venda:\");\n\n\t\tboolean removida = false;\n\t\tint id, buscarId = -1;\n\n\t\tdo {\n\t\t\tin = new Scanner(System.in);\n\t\t\tSystem.out.println(\"Informe o id da mercadoria a ser removida\");\n\t\t\tid = in.nextInt();\n\n\t\t\tbuscarId = facade.buscarIdVenda(id);\n\n\t\t\tif (buscarId == id) {\n\t\t\t\t// coleta dados\n\t\t\t\t// seta o funcionario\n\t\t\t\t// tenta adicionar ao banco\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"Aguarde enquanto removemos o usuario do sistema.\");\n\t\t\t\tfacade.apagarVenda(buscarId);\n\t\t\t\tremovida = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Id não encontrado\");\n\t\t\t}\n\t\t} while (!removida);\n\n\t}\n\n\tprivate void EditarVenda() {\n\n\t\tSystem.out.println(\"Carregando tela Editar Venda:\");\n\t\tvenda = new Venda();\n\t\tint buscarId, id, qtdVendas = -1;\n\t\tString dataVenda = null, vendedorRg = null;\n\t\tdouble subtotal = -1;\n\t\tboolean editada = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tdo {\n\t\t\tid = in.nextInt();\n\t\t\tbuscarId = facade.buscarIdVenda(id);\n\n\t\t\tif (buscarId == id) {\n\t\t\t\t// coleta dados\n\t\t\t\tSystem.out.println(\"Informe o novo subtotal\");\n\t\t\t\tsubtotal = mercadoriaSubtotal();\n\t\t\t\tSystem.out.println(\"Informe o RG do funcionario\");\n\t\t\t\tvendedorRg = setRg();\n\t\t\t\tSystem.out.println(\"Informe a data da venda\");\n\t\t\t\tdataVenda = setData();\n\t\t\t\tSystem.out.println(\"Informe a quantidade da venda\");\n\t\t\t\tqtdVendas = mercadoriaQtdVenda();\n\n\t\t\t\t// seta a venda\n\t\t\t\tvenda.setID(buscarId);\n\t\t\t\tvenda.setSubtotal(subtotal);\n\t\t\t\tvenda.setVendedorRG(vendedorRg);\n\t\t\t\tvenda.setDataVenda(dataVenda);\n\t\t\t\tvenda.setQtdVendas(qtdVendas);\n\n\t\t\t\t// tenta editar\n\t\t\t\tSystem.out.println(\"Aguarde enquanto editamos a venda.\");\n\n\t\t\t\tfacade.editarVenda(venda);\n\t\t\t\teditada = true;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Venda nao cadastrada no sistema\");\n\t\t\t}\n\t\t} while (!editada);\n\n\t}\n\n\tprivate void CadastrarVenda() {\n\n\t\tSystem.out.println(\"Carregando tela Cadastro Venda:\");\n\n\t\tvenda = new Venda();\n\n\t\t// coleta dados\n\t\tdouble subtotal = mercadoriaSubtotal();\n\t\tString vendedorRg = setRg();\n\t\tString dataVenda = setData();\n\t\tint qtdVenda = mercadoriaQtdVenda();\n\n\t\t// seta a mercadoria\n\t\tvenda.setSubtotal(subtotal);\n\t\tvenda.setVendedorRG(vendedorRg);\n\t\tvenda.setDataVenda(dataVenda);\n\t\tvenda.setQtdVendas(qtdVenda);\n\n\t\t// tenta adicionar ao banco\n\t\tSystem.out.println(\"Aguarde enquanto tentamos cadastrar.\");\n\t\tfacade.criarVenda(venda);\n\n\t}\n\n\tprivate int mercadoriaQtdVenda() {\n\t\tint qtdVenda = -1;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite a quantidade da venda:\");\n\t\t\t\tqtdVenda = in.nextInt();\n\t\t\t\tif (qtdVenda > 0) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Quantidade = \" + qtdVenda\n\t\t\t\t\t\t+ \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Quantidade confirmada.\");\n\t\t\t\t\treturn qtdVenda;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn qtdVenda;\n\n\t}\n\n\tprivate double mercadoriaSubtotal() {\n\n\t\tdouble subtotal = -1.0;\n\t\tboolean confirma = false;\n\t\tboolean valido = false;\n\n\t\tin = new Scanner(System.in);\n\n\t\tString resposta;\n\n\t\twhile (!confirma) {\n\t\t\tvalido = false;\n\t\t\twhile (!valido) {\n\t\t\t\tSystem.out.println(\"Digite o subtotal:\");\n\t\t\t\tsubtotal = in.nextDouble();\n\t\t\t\tif (subtotal > 0.0) {\n\t\t\t\t\tvalido = true;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Nome = \" + subtotal\n\t\t\t\t\t\t+ \"\\nTem certeza? (s/n)\");\n\t\t\t\tresposta = in.next();\n\n\t\t\t\tif (resposta.equalsIgnoreCase(\"s\")) {\n\t\t\t\t\tconfirma = true;\n\t\t\t\t\tSystem.out.println(\"Subtotal confirmado.\");\n\t\t\t\t\treturn subtotal;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tin.close();\n\n\t\treturn subtotal;\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t/*\n\t * PARTE RELACIONADA AO MENU PRINCIPAL\n\t */\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tpublic void MenuPrincipal() throws OpcaoIlegalException {\n\t\topcao = -1;\n\t\tboolean sair = false;\n\t\tin = new Scanner(System.in);\n\n\t\twhile (!sair) {\n\t\t\tSystem.out.println(\"~~~~~ Menu Principal ~~~~~\");\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"Digite o numero correspondente a opcao desejada.\");\n\t\t\tSystem.out.println(\"0- Sair do Programa\");\n\t\t\tSystem.out.println(\"1- Menu Funcionarios\");\n\t\t\tSystem.out.println(\"2- Menu Mercadorias\");\n\t\t\tSystem.out.println(\"3- Menu Vendas\");\n\t\t\topcao = in.nextInt();\n\t\t\tswitch (opcao) {\n\n\t\t\tcase 0:\n\t\t\t\tsair = true;\n\t\t\t\tSystem.out.println(\"At� a pr�xima ;)\");\n\t\t\t\tbreak;\n\t\t\tcase 1: // funcionario\n\t\t\t\tboolean capturouFuncionario = false;\n\t\t\t\tdo {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcapturouFuncionario = false;\n\t\t\t\t\t\tMenuFuncionarios();\n\t\t\t\t\t} catch (OpcaoIlegalException e) {\n\t\t\t\t\t\tcapturouFuncionario = true;\n\t\t\t\t\t\tSystem.out.println(\"Opcao Invalida.\");\n\n\t\t\t\t\t}\n\t\t\t\t} while (capturouFuncionario);\n\t\t\t\tbreak;\n\t\t\tcase 2: // mercadoria\n\t\t\t\tboolean capturouMercadoria = false;\n\t\t\t\tdo {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcapturouMercadoria = false;\n\t\t\t\t\t\tMenuMercadoria();\n\t\t\t\t\t} catch (OpcaoIlegalException e) {\n\t\t\t\t\t\tcapturouMercadoria = true;\n\t\t\t\t\t\tSystem.out.println(\"Opcao Invalida.\");\n\n\t\t\t\t\t}\n\t\t\t\t} while (capturouMercadoria);\n\n\t\t\t\tbreak;\n\t\t\tcase 3: // venda\n\t\t\t\tboolean capturouVenda = false;\n\t\t\t\tdo {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcapturouVenda = false;\n\t\t\t\t\t\tMenuVendas();\n\t\t\t\t\t} catch (OpcaoIlegalException e) {\n\t\t\t\t\t\tcapturouVenda = true;\n\t\t\t\t\t\tSystem.out.println(\"Opcao Invalida.\");\n\n\t\t\t\t\t}\n\t\t\t\t} while (capturouVenda);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new OpcaoIlegalException();\n\t\t\t}\n\t\t}\n\t\tin.close();\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t/*\n\t * METODO MAIN\n\t */\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"iniciando...\");\n\t\tScanner local = new Scanner(System.in);\n\t\tMain main = new Main();\n\t\tboolean capturouPrincipal;\n\n\t\tdo { // continua tentando rodar o menu enquanto alguma excecao for\n\t\t\t\t// capturada\n\t\t\ttry {\n\t\t\t\tcapturouPrincipal = false;\n\t\t\t\tmain.MenuPrincipal();\n\t\t\t} catch (OpcaoIlegalException e) {\n\t\t\t\tcapturouPrincipal = true;\n\t\t\t\tSystem.out.println(\"Opcao Invalida.\");\n\n\t\t\t}\n\t\t} while (capturouPrincipal);\n\n\t\tlocal.close();\n\n\t}\n\n\tpublic int getOpcao() {\n\t\treturn opcao;\n\t}\n\n\tpublic void setOpcao(int opcao) {\n\t\tthis.opcao = opcao;\n\t}\n\n\tpublic IFuncionario getFuncionario() {\n\t\treturn new Funcionario();\n\t}\n\n\tpublic void setFuncionario(IFuncionario funcionario) {\n\t\tthis.funcionario = funcionario;\n\t}\n\n\tpublic String getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(String data) {\n\t\tthis.data = data;\n\t}\n\n\tpublic IMercadoria getMercadoria() {\n\t\treturn mercadoria;\n\t}\n\n\tpublic void setMercadoria(IMercadoria mercadoria) {\n\t\tthis.mercadoria = mercadoria;\n\t}\n\n\tpublic IVenda getVenda() {\n\t\treturn venda;\n\t}\n\n\tpublic void setVenda(IVenda venda) {\n\t\tthis.venda = venda;\n\t}\n\n\tpublic List getListFuncionarios() {\n\t\treturn listFuncionarios;\n\t}\n\n\tpublic void setListFuncionarios(List listFuncionarios) {\n\t\tthis.listFuncionarios = listFuncionarios;\n\t}\n\n\tpublic List getListVendas() {\n\t\treturn listVendas;\n\t}\n\n\tpublic void setListVendas(List listVendas) {\n\t\tthis.listVendas = listVendas;\n\t}\n\n\tpublic List getListMercadorias() {\n\t\treturn listMercadorias;\n\t}\n\n\tpublic void setListMercadorias(List listMercadorias) {\n\t\tthis.listMercadorias = listMercadorias;\n\t}\n\n\tpublic String getRg() {\n\t\treturn rg;\n\t}\n\n\tpublic void setRg(String rg) {\n\t\tthis.rg = rg;\n\t}\n\n\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tthis.cpf = cpf;\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,0,null,null,0,0,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,null,0,0,0,0,null,0,null,0,0,null,0,0,null,null,null,0,0,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,null,null,null,0,0,null,null,null,0,null,null,0,null,0,null,0,0,0,0,null,null,0,null,null,0,null,null,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,null,0,null,null,null,0,null,null,null,null,0,0,0,0,0,null,null,0,0,0,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,0,null,null,0,0,0,0,0,0,null,null,0,0,null,0,null,null,null,0,null,0,0,null,0,0,null,0,null,0,null,0,null,0,null,null,0,0,0,0,0,0,null,0,null,null,0,0,null,null,null,0,null,null,0,null,0,null,0,null,null,0,0,0,0,0,0,0,0,null,null,0,null,null,0,null,null,null,0,null,0,0,null,null,0,0,null,0,null,null,0,null,null,0,null,0,0,null,0,null,null,null,null,null,0,0,0,null,0,null,0,null,null,null,0,null,0,0,null,0,null,null,0,null,0,null,0,0,null,null,0,null,0,null,0,null,null,null,null,null,null,0,null,0,null,0,0,0,null,0,null,null,null,null,null,0,null,0,0,0,0,null,null,null,0,0,null,0,0,null,null,0,null,0,null,0,null,null,0,0,0,0,null,0,0,null,0,null,0,null,0,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,null,0,0,0,null,0,null,null,null,null,null,null,0,null,0,null,null,null,0,0,0,null,null,null,0,null,0,0,0,0,null,0,0,0,null,null,null,0,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,0,0,0,null,null,0,null,0,0,0,0,null,0,0,0,null,null,null,0,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,0,0,0,null,null,null,0,null,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,0,null,null,0,null,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,0,0,0,0,null,null,0,null,null,null,0,0,0,0,0,0,null,null,0,null,null,0,null,0,null,null,0,0,null,null,null,0,null,null,null,null,null,0,0,null,null,null,0,0,0,0,null,null,0,0,null,null,null,null,null,null,0,null,null,null,0,0,0,0,null,null,0,null,0,0,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,null,0,0,null,null,null,0,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,null,0,0,0,null,null,0,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,null,0,null,null,null,0,0,null,null,null,0,null,null,0,null,0,null,0,null,0,0,0,0,0,0,0,0,null,null,0,null,null,0,null,null,null,null,0,0,0,null,null,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,null,0,null,0,null,null,null,0,null,0,0,0,null,null,null,0,0,null,0,null,0,null,0,null,0,0,null,0,null,0,null,0,null,null,null,0,null,0,null,null,0,0,0,0,0,null,null,0,0,0,0,0,null,null,0,0,null,0,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,null,null,null,0,null,null,0,null,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,null,null,null,0,0,null,null,null,0,null,null,0,null,0,0,null,null,0,0,0,0,0,0,0,null,null,0,null,null,0,null,null,null,null,0,null,0,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,null,0,0,null,null,null,0,null,0,0,null,null,0,0,0,null,0,null,0,null,null,null,0,null,0,0,null,0,null,0,null,0,null,null,null,0,0,0,0,0,0,null,0,null,null,0,0,null,0,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,null,null,0,null,0,0,null,0,null,0,null,0,null,null,null,0,null,0,null,null,0,0,0,0,null,null,0,0,0,0,null,null,0,0,null,0,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,0,0,0,0,0,0,null,null,0,0,0,null,0,null,null,0,0,0,0,0,null,0,0,0,null,0,null,null,0,0,0,0,0,null,0,0,null,0,null,0,null,null,0,0,0,0,0,null,0,0,0,null,0,null,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,0,null,0,0,null,0,null,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,null],"name":"gui/Main.java"},{"source":"package models.funcionario;\n\npublic class Caixa extends Funcionario {\n\n\tpublic Caixa() {\n\t\tthis.cargo = \"\";\n\t\tthis.cpf = \"\";\n\t\tthis.dataNascimento = \"\";\n\t\tthis.nome = \"\";\n\t\tthis.rg = \"\";\n\t\tthis.salario = 0;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tsuper.setNome(nome);\n\t}\n\n\tpublic void setRg(String rg) {\n\t\tsuper.setRg(rg);\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tsuper.setCpf(cpf);\n\t}\n\n\tpublic void setDataNascimento(String dataNascimento) {\n\t\tsuper.setDataNascimento(dataNascimento);\n\t}\n\n\tpublic void setCargo(String cargo) {\n\t\tsuper.setCargo(cargo);\n\t}\n\n\tpublic void setSalario(double salario) {\n\t\tsuper.setSalario(salario);\n\t}\n\n\tpublic double getSalario() {\n\t\treturn 0;\n\t}\n\n}\n","coverage":[null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,null,null,null,null],"name":"models/funcionario/Caixa.java"},{"source":"package models.funcionario;\n\npublic class Estoquista extends Funcionario {\n\n\tpublic Estoquista() {\n\t\tthis.cargo = \"\";\n\t\tthis.cpf = \"\";\n\t\tthis.dataNascimento = \"\";\n\t\tthis.nome = \"\";\n\t\tthis.rg = \"\";\n\t\tthis.salario = 0;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tsuper.setNome(nome);\n\t}\n\n\tpublic void setRg(String rg) {\n\t\tsuper.setRg(rg);\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tsuper.setCpf(cpf);\n\t}\n\n\tpublic void setDataNascimento(String dataNascimento) {\n\t\tsuper.setDataNascimento(dataNascimento);\n\t}\n\n\tpublic void setCargo(String cargo) {\n\t\tsuper.setCargo(cargo);\n\t}\n\n\tpublic void setSalario(double salario) {\n\t\tsuper.setSalario(salario);\n\t}\n\n\tpublic double getSalario() {\n\t\treturn 0;\n\t}\n\n}\n","coverage":[null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,null,null,null,null],"name":"models/funcionario/Estoquista.java"},{"source":"package models.funcionario;\n\npublic class Funcionario implements IFuncionario {\n\n\tprotected String nome;\n\n\tprotected String rg;\n\n\tprotected String cpf;\n\n\tprotected String dataNascimento;\n\n\tprotected String cargo;\n\n\tprotected double salario;\n\n\tpublic Funcionario() {\n\t\tthis.cargo = \"\";\n\t\tthis.cpf = \"\";\n\t\tthis.dataNascimento = \"\";\n\t\tthis.nome = \"\";\n\t\tthis.rg = \"\";\n\t\tthis.salario = 0;\n\t}\n\n\tpublic String getNome() {\n\t\treturn nome;\n\t}\n\n\tpublic String getRg() {\n\t\treturn rg;\n\t}\n\n\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n\n\tpublic String getDataNascimento() {\n\t\treturn dataNascimento;\n\t}\n\n\tpublic String getCargo() {\n\t\treturn cargo;\n\t}\n\n\tpublic double getSalario() {\n\t\treturn salario;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tthis.nome = nome;\n\t}\n\n\tpublic void setRg(String rg) {\n\t\tthis.rg = rg;\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tthis.cpf = cpf;\n\t}\n\n\tpublic void setDataNascimento(String dataNascimento) {\n\t\tthis.dataNascimento = dataNascimento;\n\t}\n\n\tpublic void setCargo(String cargo) {\n\t\tthis.cargo = cargo;\n\t}\n\n\tpublic void setSalario(double novoSalario) {\n\t\tthis.salario = novoSalario;\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,44,44,44,44,44,44,44,44,null,null,21,null,null,null,42,null,null,null,19,null,null,null,19,null,null,null,19,null,null,null,23,null,null,null,32,32,null,null,32,32,null,null,32,32,null,null,32,32,null,null,32,32,null,null,32,32,null,null,null],"name":"models/funcionario/Funcionario.java"},{"source":"package models.funcionario;\n\npublic class Gerente extends Funcionario {\n\t \n\tpublic Gerente() {\n\t\tthis.cargo = \"\";\n\t\tthis.cpf = \"\";\n\t\tthis.dataNascimento =\"\";\n\t\tthis.nome = \"\"; \n\t\tthis.rg = \"\"; \n\t\tthis.salario = 0;  \n\t}\n\t\n\t\tpublic void setNome(String nome) {\n\t\t\tsuper.setNome(nome);\n\t\t}\n\t\t\n\t\tpublic void setRg(String rg) {\n\t\t\tsuper.setRg(rg);\n\t\t}\n\n\t\tpublic void setCpf(String cpf) {\n\t\t\tsuper.setCpf(cpf);\n\t\t}\n\n\t\tpublic void setDataNascimento(String dataNascimento) {\n\t\t\tsuper.setDataNascimento(dataNascimento);\n\t\t}\n\n\t\tpublic void setCargo(String cargo) {\n\t\t\tsuper.setCargo(cargo);\n\t\t}\n\t\t\n\t\tpublic void setSalario(double salario) {\n\t\t\tsuper.setSalario(salario);\n\t\t}\n\n\t\tpublic double getSalario() {\n\t\t\tsuper.getSalario();\n\t\t\treturn 0;\n\t\t}\t \n}\n","coverage":[null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,null],"name":"models/funcionario/Gerente.java"},{"source":"package models.funcionario;\n\npublic interface IFuncionario {\n\n\tpublic String getNome();\n\n\tpublic String getRg();\n\n\tpublic String getCpf();\n\n\tpublic String getDataNascimento();\n\n\tpublic String getCargo();\n\n\tpublic double getSalario();\n\n\tpublic void setNome(String novoNome);\n\n\tpublic void setRg(String novoRg);\n\n\tpublic void setCpf(String novoCpf);\n\n\tpublic void setDataNascimento(String novaDataNascimento);\n\n\tpublic void setCargo(String novoCargo);\n\n\tpublic void setSalario(double novoSalario);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"models/funcionario/IFuncionario.java"},{"source":"package models.funcionario;\n\npublic class Vendedor extends Funcionario {\n\n\tprivate int quantidadeVendas;\n\n\tpublic Vendedor() {\n\t\tthis.cargo = \"\";\n\t\tthis.cpf = \"\";\n\t\tthis.dataNascimento = \"\";\n\t\tthis.nome = \"\";\n\t\tthis.rg = \"\";\n\t\tthis.salario = 0;\n\t\tthis.quantidadeVendas = 0;\n\t}\n\n\tpublic int getQuantidadeVendas() {\n\t\treturn quantidadeVendas;\n\t}\n\n\tpublic void setQuantidadeVendas(int novaQuantidadeVendas) {\n\t\tthis.quantidadeVendas = novaQuantidadeVendas;\n\t}\n\n\tpublic void incrementarQtdVendas() {\n\t\tquantidadeVendas++;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tsuper.setNome(nome);\n\t}\n\n\tpublic void setRg(String rg) {\n\t\tsuper.setRg(rg);\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tsuper.setCpf(cpf);\n\t}\n\n\tpublic void setDataNascimento(String dataNascimento) {\n\t\tsuper.setDataNascimento(dataNascimento);\n\t}\n\n\tpublic void setCargo(String cargo) {\n\t\tsuper.setCargo(cargo);\n\t}\n\n\tpublic void setSalario(double salario) {\n\t\tsuper.setSalario(salario);\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,1,1,1,1,1,1,1,1,1,null,null,1,null,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,1,1,null,null,null],"name":"models/funcionario/Vendedor.java"},{"source":"package models.mercadoria;\n\npublic interface IMercadoria {\n\n\tpublic double getPreco();\n\n\tpublic int getID();\n\t\n\tpublic void setID(int id);\n\n\tpublic String getNome();\n\n\tpublic String getCor();\n\n\tpublic String getTamanho();\n\n\tpublic String getProduto();\n\n\tpublic void setPreco(double novoPreco);\n\n\tpublic void setNome(String novoNome);\n\n\tpublic void setCor(String novaCor);\n\n\tpublic void setTamanho(String novoTamanho);\n\n\tpublic void setProduto(String novoProduto);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"models/mercadoria/IMercadoria.java"},{"source":"package models.mercadoria;\n\npublic class Mercadoria implements IMercadoria {\n\n\tprivate double preco;\n\n\tprivate int ID;\n\n\tprivate String nome;\n\n\tprivate String cor;\n\n\tprivate String tamanho;\n\n\tprivate String produto;\n\n\tpublic Mercadoria() {\n\t\tthis.preco = 0;\n\t\tthis.ID = 0;\n\t\tthis.nome = \"\";\n\t\tthis.cor = \"\";\n\t\tthis.tamanho = \"\";\n\t\tthis.produto = \"\";\n\t}\n\n\tpublic double getPreco() {\n\t\treturn preco;\n\t}\n\n\tpublic int getID() {\n\t\treturn ID;\n\t}\n\n\tpublic String getNome() {\n\t\treturn nome;\n\t}\n\n\tpublic String getCor() {\n\t\treturn cor;\n\t}\n\n\tpublic String getTamanho() {\n\t\treturn tamanho;\n\t}\n\n\tpublic String getProduto() {\n\t\treturn produto;\n\t}\n\n\tpublic void setPreco(double novoPreco) {\n\t\tthis.preco = novoPreco;\n\t}\n\n\tpublic void setNome(String novoNome) {\n\t\tthis.nome = novoNome;\n\t}\n\n\tpublic void setCor(String novaCor) {\n\t\tthis.cor = novaCor;\n\t}\n\n\tpublic void setTamanho(String novoTamanho) {\n\t\tthis.tamanho = novoTamanho;\n\t}\n\n\tpublic void setProduto(String novoProduto) {\n\t\tthis.produto = novoProduto;\n\t}\n\n\tpublic void setID(int id) {\n\t\tthis.ID = id; \n\t\t\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,22,22,22,22,22,22,22,null,null,8,null,null,null,2,null,null,null,8,null,null,null,10,null,null,null,8,null,null,null,10,null,null,null,14,14,null,null,14,14,null,null,14,14,null,null,14,14,null,null,14,14,null,null,1,null,1,null,null,null],"name":"models/mercadoria/Mercadoria.java"},{"source":"package models.venda;\n\npublic interface IVenda {\n\n\tpublic int getID();\n\n\tpublic double getSubtotal();\n\n\tpublic String getVendedorRG();\n\n\tpublic String getDataVenda();\n\n\tpublic int getQtdVendas();\n\n\tpublic void setID(int iD);\n\n\tpublic void setSubtotal(double subtotal);\n\n\tpublic void setVendedorRG(String vendedorRG);\n\n\tpublic void setDataVenda(String dataVenda);\n\n\tpublic void setQtdVendas(int qtdVendas);\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"models/venda/IVenda.java"},{"source":"package models.venda;\n\npublic class Venda implements IVenda {\n\n\tprivate int ID;\n\t\n\tprivate double subtotal;\n\n\tprivate String vendedorRG;\n\n\tprivate String dataVenda;\n\n\tprivate int qtdVendas;\n\n\tpublic Venda() {\n\t\tthis.ID = 0;\n\t\tthis.subtotal = 0;\n\t\tthis.vendedorRG = \"\";\n\t\tthis.dataVenda = \"\";\n\t\tthis.qtdVendas = 0;\n\t}\n\n\tpublic int getID() {\n\t\treturn ID;\n\t}\n\n\tpublic double getSubtotal() {\n\t\treturn subtotal;\n\t}\n\n\tpublic String getVendedorRG() {\n\t\treturn vendedorRG;\n\t}\n\n\tpublic String getDataVenda() {\n\t\treturn dataVenda;\n\t}\n\n\tpublic int getQtdVendas() {\n\t\treturn qtdVendas;\n\t}\n\n\tpublic void setID(int iD) {\n\t\tthis.ID = iD;\n\t}\n\n\tpublic void setSubtotal(double subtotal) {\n\t\tthis.subtotal = subtotal;\n\t}\n\n\tpublic void setVendedorRG(String vendedorRG) {\n\t\tthis.vendedorRG = vendedorRG;\n\t}\n\n\tpublic void setDataVenda(String dataVenda) {\n\t\tthis.dataVenda = dataVenda;\n\t}\n\n\tpublic void setQtdVendas(int novaQtdVendas) {\n\t\tqtdVendas = novaQtdVendas;\n\t}\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,13,13,13,13,13,13,13,null,null,2,null,null,null,4,null,null,null,4,null,null,null,4,null,null,null,6,null,null,null,3,3,null,null,6,6,null,null,6,6,null,null,6,6,null,null,6,6,null,null],"name":"models/venda/Venda.java"},{"source":"package test;\n\nimport static org.junit.Assert.*;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\nimport models.funcionario.Caixa;\nimport models.funcionario.Estoquista;\nimport models.funcionario.Funcionario;\nimport models.funcionario.Gerente;\nimport models.funcionario.Vendedor;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport dao.concrete.DAOFuncionario;\n\npublic class DaoFuncionarioTest {\n\n\tpublic DAOFuncionario daoFuncionario; \n\tpublic Funcionario funcionario;\n\tpublic Funcionario funcionario2;\n\t\n\t@Before\n\tpublic void setUp(){\n\t\tdaoFuncionario = new DAOFuncionario();\n\t\tfuncionario = new Funcionario();\n\t\tfuncionario2 = new Funcionario();\n\t}\n\t\n\t@Test\n\tpublic void testCadastroFuncionario() {\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\tassertTrue(daoFuncionario.checaRg(\"111111111\"));\n\t\tassertEquals(funcionario.getNome(), daoFuncionario.buscarFuncionario(\"111111111\").getNome());\n\t\tassertEquals(funcionario.getCargo(), daoFuncionario.buscarFuncionario(\"111111111\").getCargo());\n\t\tassertEquals(funcionario.getCpf(), daoFuncionario.buscarFuncionario(\"111111111\").getCpf());\n\t\tassertEquals(funcionario.getDataNascimento(), daoFuncionario.buscarFuncionario(\"111111111\").getDataNascimento());\n\t\tassertEquals(funcionario.getRg(), daoFuncionario.buscarFuncionario(\"111111111\").getRg());\n\t\tassertEquals(funcionario.getSalario(), daoFuncionario.buscarFuncionario(\"111111111\").getSalario(), 0);\n\t\t\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t\tassertTrue(!daoFuncionario.checaRg(\"111111111\"));\n\t\t\n\t}\n\t\n\n\t\n\t@Test\n\tpublic void testBuscarRg(){\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\t\n\t\tassertEquals(daoFuncionario.buscarRg(funcionario.getRg()), funcionario.getRg());\n\t\t\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t\t\n\t\tassertTrue(!daoFuncionario.checaRg(\"111111111\"));\n\t\tassertEquals(daoFuncionario.buscarRg(funcionario.getRg()), null);\n\t\t\n\t}\n\n\t@Test\n\tpublic void testEditarFuncionario(){\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\t\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\t\n\t\tfuncionario2.setNome(\"Felipe2\");\n\t\tfuncionario2.setRg(\"111111111\");\n\t\tfuncionario2.setCpf(\"00000000002\");\n\t\tfuncionario2.setDataNascimento(\"04/02/1992\");\n\t\tfuncionario2.setCargo(\"Gerente2\");\n\t\tfuncionario2.setSalario(10002);\n\t\t\n\t\tdaoFuncionario.editarFuncionario(funcionario2);\n\t\t\n\t\tassertEquals(funcionario2.getNome(), daoFuncionario.buscarFuncionario(\"111111111\").getNome());\n\t\tassertEquals(funcionario2.getCargo(), daoFuncionario.buscarFuncionario(\"111111111\").getCargo());\n\t\tassertEquals(funcionario2.getCpf(), daoFuncionario.buscarFuncionario(\"111111111\").getCpf());\n\t\tassertEquals(funcionario2.getDataNascimento(), daoFuncionario.buscarFuncionario(\"111111111\").getDataNascimento());\n\t\tassertEquals(funcionario2.getRg(), daoFuncionario.buscarFuncionario(\"111111111\").getRg());\n\t\tassertEquals(funcionario2.getSalario(), daoFuncionario.buscarFuncionario(\"111111111\").getSalario(), 0);\n\n\t\t\n\t\t\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t\tassertTrue(!daoFuncionario.checaRg(\"111111111\"));\n\t}\n\t\n\t@SuppressWarnings(\"deprecation\")\n\t@Test\n\tpublic void testAtualizaSalario(){\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\t\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\t\n\t\tfuncionario2.setNome(\"Felipe2\");\n\t\tfuncionario2.setRg(\"111111111\");\n\t\tfuncionario2.setCpf(\"00000000002\");\n\t\tfuncionario2.setDataNascimento(\"04/02/1992\");\n\t\tfuncionario2.setCargo(\"Gerente2\");\n\t\tfuncionario2.setSalario(10002);\n\t\t\n\t\tdaoFuncionario.atualizarSalario(funcionario2);\n\t\t\n\n\t\tassertEquals(funcionario2.getSalario(), daoFuncionario.buscarSalario(funcionario), 0);\n\t\t\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t\tassertTrue(!daoFuncionario.checaRg(\"111111111\"));\n\t}\n\t\n\t@Test\n\tpublic void testBuscarSalario(){\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\t\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\t\n\t\tassertEquals(daoFuncionario.buscarSalario(funcionario), funcionario.getSalario(), 0);\n\t\t\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t\tassertTrue(!daoFuncionario.checaRg(\"111111111\"));\n\t\tassertEquals(daoFuncionario.buscarSalario(funcionario), -1, 0);\n\t}\n\t\n\t@Test\n\tpublic void testeListaFuncionarios(){\n\t\tfuncionario.setNome(\"Felipe\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setCpf(\"00000000000\");\n\t\tfuncionario.setDataNascimento(\"04/02/1991\");\n\t\tfuncionario.setCargo(\"Gerente\");\n\t\tfuncionario.setSalario(10000);\n\t\t\n\t\tdaoFuncionario.criarFuncionario(funcionario);\n\t\t\n\t\tassertEquals(1, daoFuncionario.listarFuncionario().size());\n\t\tdaoFuncionario.apagarFuncionario(\"111111111\");\n\t}\n\t\n\t@Test\n\tpublic void testInstanciarFuncionarios(){\n\t\ttry {\n\t\t\tdaoFuncionario.apagarTodos();\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\tCaixa c = new Caixa();\n\t\tEstoquista e = new Estoquista();\n\t\tGerente g = new Gerente();\n\t\tVendedor v = new Vendedor();\n\t\t\n\t\tc.setCargo(\"caixa\");\n\t\tc.setCpf(\"11111111111\");\n\t\tc.setDataNascimento(\"data\");\n\t\tc.setNome(\"caixa\");\n\t\tc.setRg(\"111111111\");\n\t\tc.setSalario(1500);\n\t\tdaoFuncionario.criarFuncionario(c);\n\t\t\n\t\te.setCargo(\"estoquista\");\n\t\te.setCpf(\"11111111112\");\n\t\te.setDataNascimento(\"data\");\n\t\te.setNome(\"estoquista\");\n\t\te.setRg(\"111111112\");\n\t\te.setSalario(1500);\n\n\t\tdaoFuncionario.criarFuncionario(e);\n\t\t\n\t\tg.setCargo(\"gerente\");\n\t\tg.setCpf(\"11111111113\");\n\t\tg.setDataNascimento(\"data\");\n\t\tg.setNome(\"gerente\");\n\t\tg.setRg(\"111111113\");\n\t\tg.setSalario(1500);\n\t\tdaoFuncionario.criarFuncionario(g);\n\t\t \n\t\tv.setCargo(\"vendedor\");\n\t\tv.setCpf(\"11111111114\");\n\t\tv.setDataNascimento(\"data\");\n\t\tv.setNome(\"vendedor\");\n\t\tv.setRg(\"111111114\");\n\t\tv.setQuantidadeVendas(50);\n\t\tv.incrementarQtdVendas();\n\t\tassertEquals(51, v.getQuantidadeVendas());\n\t\tv.setSalario(1500);\n\t\tdaoFuncionario.criarFuncionario(v);\n\t\t\n\t\tassertEquals(c.getRg(), daoFuncionario.buscarRg(c.getRg()));\n\t\tassertEquals(e.getRg(), daoFuncionario.buscarRg(e.getRg()));\n\t\tassertEquals(g.getRg(), daoFuncionario.buscarRg(g.getRg()));\n\t\tassertEquals(v.getRg(), daoFuncionario.buscarRg(v.getRg()));\n\t\t\n\n\t\ttry {\n\t\t\tdaoFuncionario.apagarTodos();\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t}\n\t\n\n\t\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,0,null,null,null,null,null,0,0,0,0,0,0,0,null,0,null,0,null,0,0,null,0,null,null,null,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,null,null,null,0,0,0,null,null,null,null,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,null,0,null,null,0,null,0,0,0,null,null,null,0,0,0,0,0,0,null,0,null,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,null,0,0,0,null,null,null,null,0,0,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,null,null,0,0,null,0,0,0,null,null,null,null,null],"name":"test/DaoFuncionarioTest.java"},{"source":"package test;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport models.funcionario.Funcionario;\nimport models.mercadoria.Mercadoria;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport dao.concrete.DAOMercadoria;\n\npublic class DaoMercadoriaTest {\n\n\n\tpublic DAOMercadoria daoMercadoria; \n\tpublic Mercadoria mercadoria;\n\tpublic Mercadoria mercadoria2;\n\t\n\t@Before\n\tpublic void setUp(){\n\t\tdaoMercadoria = new DAOMercadoria();\n\t\tmercadoria = new Mercadoria();\n\t\tmercadoria2 = new Mercadoria();\n\t}\n\t\n\t@Test\n\tpublic void testCadastroMercadoria(){\n\n\t\tdaoMercadoria.apagarTudo();\n\t\tmercadoria.setCor(\"azul\");\n\t\tmercadoria.setNome(\"teclado\");\n\t\tmercadoria.setPreco(2.50);\n\t\tmercadoria.setProduto(\"teclado importado\");\n\t\tmercadoria.setTamanho(\"grande\");\n\t\tdaoMercadoria.criarMercadoria(mercadoria);\n//\t\tint id = daoMercadoria.buscaIdPorNome(\"teclado\");\n//\t\tSystem.out.println(id);\n\t\tassertEquals(1, daoMercadoria.listarMercadorias().size());\n\t\t\n\t\t\n\t\tdaoMercadoria.apagarMercadoria(daoMercadoria.buscaIdPorNome(mercadoria.getNome()));\n\t\tassertEquals(0, daoMercadoria.listarMercadorias().size());\n\t\t\n\t\tassertEquals(-1, daoMercadoria.buscaIdPorNome(mercadoria.getNome()));\n\t\t\n\t\tdaoMercadoria.apagarTudo();\n\t\t\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testBuscarMercadoria(){\n\t\tmercadoria.setCor(\"azul\");\n\t\tmercadoria.setNome(\"teclado\");\n\t\tmercadoria.setPreco(2.50);\n\t\tmercadoria.setProduto(\"teclado importado\");\n\t\tmercadoria.setTamanho(\"grande\");\n\t\tdaoMercadoria.criarMercadoria(mercadoria);\n\t\t\n\t\tint id = daoMercadoria.buscaIdPorNome(\"teclado\");\n\t\tSystem.out.println(id);\n\t\t\n\t\tassertEquals(mercadoria.getCor(), daoMercadoria.buscarMercadoria_ID(id).getCor());\n\t\tassertEquals(mercadoria.getProduto(), daoMercadoria.buscarMercadoria_ID(id).getProduto());\n\t\tassertEquals(mercadoria.getPreco(), daoMercadoria.buscarMercadoria_ID(id).getPreco(), 0);\n\t\tassertEquals(mercadoria.getTamanho(), daoMercadoria.buscarMercadoria_ID(id).getTamanho());\n\t\t\n\t\tassertEquals(id, daoMercadoria.buscarIdMercadoria(id));\n\t\tdaoMercadoria.apagarTudo();\n\t\t\n\t\tassertEquals(-1, daoMercadoria.buscarIdMercadoria(id));\n\t}\n\t\n\tpublic void testEditarMercadoria(){\n//\t\tmercadoria.setCor(\"azul\");\n//\t\tmercadoria.setNome(\"teclado\");\n//\t\tmercadoria.setPreco(2.50);\n//\t\tmercadoria.setProduto(\"teclado importado\");\n//\t\tmercadoria.setTamanho(\"grande\");\n//\t\tdaoMercadoria.criarMercadoria(mercadoria);\n//\t\t\n//\t\tmercadoria2.setCor(\"azul\");\n//\t\tmercadoria2.setNome(\"teclado\");\n//\t\tmercadoria2.setPreco(2.50);\n//\t\tmercadoria2.setProduto(\"teclado importado\");\n//\t\tmercadoria2.setTamanho(\"grande\");\n\t}\n\t\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,0,0,0,0,0,0,0,null,null,0,null,null,0,0,null,0,null,0,null,null,0,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null],"name":"test/DaoMercadoriaTest.java"},{"source":"package test;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport models.venda.Venda;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport dao.concrete.DAOVendas;\n\n\npublic class DaoVendasTest {\n\n\n\tpublic DAOVendas daoVendas; \n\tpublic Venda venda;\n\t\n\t@Before\n\tpublic void setUp(){\n\t\tdaoVendas = new DAOVendas();\n\t\tvenda = new Venda();\n\t}\n\t\n//\t@Test\n//\tpublic void testCadastrarVenda(){\n//\n//\t\tdaoVendas.apagarTudo();\n//\t\tvenda.setDataVenda(\"hoje\");\n//\t\tvenda.setQtdVendas(2);\n//\t\tvenda.setSubtotal(50);\n//\t\tvenda.setVendedorRG(\"111111111\");\n//\t\t\n//\t\tdaoVendas.criarVenda(venda);\n//\t\t\n//\t\tassertEquals(1, daoVendas.listarVendas().size());\n//\t}\n//\t\n//\t@Test\n//\tpublic void testeBuscarVenda(){\n//\n//\t\tdaoVendas.apagarTudo();\n//\t\tvenda.setDataVenda(\"hoje\");\n//\t\tvenda.setQtdVendas(2);\n//\t\tvenda.setSubtotal(50);\n//\t\tvenda.setVendedorRG(\"111111111\");\n//\t\t\n//\t\tdaoVendas.criarVenda(venda);\n//\t\tint id = daoVendas.buscarVendaPorNome(\"hoje\");\n//\t\tSystem.out.println(id);\n//\t\t\n//\t\tassertEquals(venda.getQtdVendas(), daoVendas.buscarVenda(id).getQtdVendas());\n//\t\tassertEquals(venda.getSubtotal(), daoVendas.buscarVenda(id).getSubtotal(), 0);\n//\t\tassertEquals(venda.getVendedorRG(), daoVendas.buscarVenda(id).getVendedorRG());\n//\t\t\n//\t\tassertEquals(id, daoVendas.buscarIdVenda(id));\n//\t\tdaoVendas.apagarTudo();\n//\t\tassertEquals(-1, daoVendas.buscarVendaPorNome(\"hoje\"));\n//\t\tassertEquals(-1, daoVendas.buscarIdVenda(id));\n//\t}\n//\t\n//\t@Test\n//\tpublic void testApagarVenda(){\n//\t\tdaoVendas.apagarTudo();\n//\t\tvenda.setDataVenda(\"hoje\");\n//\t\tvenda.setQtdVendas(2);\n//\t\tvenda.setSubtotal(50);\n//\t\tvenda.setVendedorRG(\"111111111\");\n//\t\t\n//\t\tdaoVendas.criarVenda(venda);\n//\t\tint id = daoVendas.buscarVendaPorNome(\"hoje\");\n//\t\t\n//\t\tdaoVendas.apagarVenda(id);\n//\t\t\n//\t\tassertEquals(0, daoVendas.listarVendas().size());\n//\t}\n\n\t\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"test/DaoVendasTest.java"},{"source":"package test;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport models.funcionario.Funcionario;\nimport models.mercadoria.Mercadoria;\nimport models.venda.Venda;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport dao.concrete.DAOMercadoria;\nimport dao.concrete.DAOVendas;\nimport facade.Facade;\n\n\npublic class FacadeTest {\n\n\tpublic Facade facade; \n\tpublic Venda venda;\n\tpublic Funcionario funcionario;\n\tpublic Mercadoria mercadoria;\n\tpublic DAOMercadoria daomercadoria;\n\tpublic DAOVendas daovendas;\n\t\n\t@Before\n\tpublic void setUp(){\n\t\tfacade = new Facade(0);\n\t\tvenda = new Venda();\n\t\tfuncionario = new Funcionario();\n\t\tmercadoria = new Mercadoria();\n\t\tdaomercadoria = new DAOMercadoria();\n\t\tdaovendas = new DAOVendas();\n\t}\n\t\n\t@Test\n\tpublic void testCriaFuncionario(){\n\t\tfuncionario.setCargo(\"cargo\");\n\t\tfuncionario.setCpf(\"11012548\");\n\t\tfuncionario.setDataNascimento(\"hoje\");\n\t\tfuncionario.setNome(\"dalay\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setSalario(1000);\n\t\t\n\t\tfacade.criarFuncionario(funcionario);\n\t\tassertEquals(1, facade.listarFuncionarios().size());\n\t\tfacade.apagarFuncionario(funcionario);\n\t\tassertEquals(0, facade.listarFuncionarios().size());\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void editarFuncionario(){\n\t\tfuncionario.setCargo(\"cargo\");\n\t\tfuncionario.setCpf(\"11012548\");\n\t\tfuncionario.setDataNascimento(\"hoje\");\n\t\tfuncionario.setNome(\"dalay\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setSalario(1000);\n\t\t\n\t\tFuncionario f2 = new Funcionario();\n\t\tf2.setNome(\"Felipe\");\n\t\tf2.setCargo(\"cargo\");\n\t\tf2.setCpf(\"11012548\");\n\t\tf2.setDataNascimento(\"hoje\");\n\t\tf2.setRg(\"111111111\");\n\t\tf2.setSalario(1000);\n\t\t\n\t\tfacade.criarFuncionario(funcionario);\n\t\tfacade.editarFuncionario(f2);\n\t\t\n\t\tassertEquals(f2.getNome(), facade.buscarFuncionario(\"111111111\").getNome());\n\t\tassertEquals(f2.getRg(), facade.buscarRg(f2.getRg()));\n\n\t\tfacade.apagarFuncionario(\"111111111\");\n\n\t\tassertEquals(0, facade.listarFuncionarios().size());\n\t}\n\t\n\t@Test\n\tpublic void testAtualizarSalario(){\n\n\t\t\n\t\tdaomercadoria.apagarTudo();\n\t\tfuncionario.setCargo(\"cargo\");\n\t\tfuncionario.setCpf(\"11012548\");\n\t\tfuncionario.setDataNascimento(\"hoje\");\n\t\tfuncionario.setNome(\"dalay\");\n\t\tfuncionario.setRg(\"111111111\");\n\t\tfuncionario.setSalario(1000);\n\t\tfacade.criarFuncionario(funcionario);\n\t\t\n\t\tassertEquals(funcionario.getSalario(), facade.buscarSalario(funcionario), 0);\n\t\t\n\t\tFuncionario f2 = new Funcionario();\n\t\tf2.setNome(\"Felipe\");\n\t\tf2.setCargo(\"cargo\");\n\t\tf2.setCpf(\"11012548\");\n\t\tf2.setDataNascimento(\"hoje\");\n\t\tf2.setRg(\"111111111\");\n\t\tf2.setSalario(250);\n\t\t\n\t\tfacade.atualizarSalario(f2);\n\t\t\n\t\tassertEquals(f2.getSalario(), facade.buscarSalario(f2), 0);\n\t\t\n\t\tfacade.apagarFuncionario(\"111111111\");\n\n\t\tassertEquals(0, facade.listarFuncionarios().size());\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testCriarMercadoria(){\n\n\t\t\n\t\tdaomercadoria.apagarTudo();\n\t\tmercadoria.setCor(\"roxo\");\n\t\tmercadoria.setNome(\"mercadoria\");\n\t\tmercadoria.setPreco(2.50);\n\t\tmercadoria.setProduto(\"produto\");\n\t\tmercadoria.setTamanho(\"grande\");\n\t\t\n\t\tfacade.criarMercadoria(mercadoria);\n\t\tint id = daomercadoria.buscaIdPorNome(\"mercadoria\");\n\t\tassertEquals(1, facade.listarMercadorias().size());\n\t\t\n\t\tfacade.apagarMercadoria(id);\n\t\t\n\n\t\tassertEquals(0, facade.listarMercadorias().size());\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testApagarMercadoria(){\n\n\t\tdaomercadoria.apagarTudo();\n\t\tmercadoria.setCor(\"roxo\");\n\t\tmercadoria.setNome(\"mercadoria\");\n\t\tmercadoria.setPreco(2.50);\n\t\tmercadoria.setProduto(\"produto\");\n\t\tmercadoria.setTamanho(\"grande\");\n\t\t\n\t\tfacade.criarMercadoria(mercadoria);\n\t\tint id = daomercadoria.buscaIdPorNome(\"mercadoria\");\n\t\t\n\t\tassertEquals(mercadoria.getProduto(), facade.buscarMercadoria(id).getProduto());\n\t\t\n\t\tfacade.apagarMercadoria(mercadoria);\n\t\tdaomercadoria.apagarTudo();\n\t\tassertEquals(-1, facade.buscarIdMercadoria(id));\n\t}\n\t\n\t@Test\n\tpublic void testEditarMercadoria(){\n\t\tdaomercadoria.apagarTudo();\n\t\tmercadoria.setCor(\"roxo\");\n\t\tmercadoria.setNome(\"mercadoria\");\n\t\tmercadoria.setPreco(2.50);\n\t\tmercadoria.setProduto(\"produto\");\n\t\tmercadoria.setTamanho(\"grande\");\n\t\t\n\t\tfacade.criarMercadoria(mercadoria);\n\t\tint id = daomercadoria.buscaIdPorNome(\"mercadoria\");\n\t\t\n\t\tMercadoria m2 = new Mercadoria();\n\t\tm2.setCor(\"preto\");\n\t\tm2.setNome(\"mercadoria\");\n\t\tm2.setPreco(2.50);\n\t\tm2.setProduto(\"produto\");\n\t\tm2.setTamanho(\"grande\");\n\t\tm2.setID(id);\n\t\t\n\t\tfacade.editarMercadoria(m2);\n\t\t\n\t\tassertEquals(m2.getCor(), facade.buscarMercadoria(id).getCor());\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testCriarVenda(){\n\t\tdaovendas.apagarTudo();\n\t\tvenda.setDataVenda(\"hoje\");\n\t\tvenda.setQtdVendas(20);\n\t\tvenda.setSubtotal(2.50);\n\t\tvenda.setVendedorRG(\"111111111\");\n\t\t\n\t\tfacade.criarVenda(venda);\n\t\t\n\t\tassertEquals(1, facade.listarVendas().size());\n\t\t\n\t\tfacade.apagarVenda(venda);\n\n\t\tdaovendas.apagarTudo();\n\n\t\tassertEquals(0, facade.listarVendas().size());\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testEditarVenda(){\n\t\tdaovendas.apagarTudo();\n\t\tvenda.setDataVenda(\"hoje\");\n\t\tvenda.setQtdVendas(20);\n\t\tvenda.setSubtotal(2.50);\n\t\tvenda.setVendedorRG(\"111111111\");\n\t\t\n\t\t\n\t\tfacade.criarVenda(venda);\n\t\tint id = daovendas.buscarVendaPorNome(\"hoje\");\n\t\tVenda v2 = new Venda();\n\t\tv2.setDataVenda(\"hoje\");\n\t\tv2.setQtdVendas(30);\n\t\tv2.setSubtotal(2.50);\n\t\tv2.setVendedorRG(\"111111111\");\n\t\tv2.setID(id);\n\t\tfacade.editarVenda(v2);\n\t\tassertEquals(v2.getQtdVendas(), facade.buscarVenda(id).getQtdVendas());\n\t\t\n\t\tdaovendas.apagarTudo();\n\t\t\n\t\tassertEquals(-1, facade.buscarIdMercadoria(id));\n\t}\n\t\n\t@Test\n\tpublic void TestApagarVenda(){\n\t\tdaovendas.apagarTudo();\n\t\tvenda.setDataVenda(\"hoje\");\n\t\tvenda.setQtdVendas(20);\n\t\tvenda.setSubtotal(2.50);\n\t\tvenda.setVendedorRG(\"111111111\");\n\t\t\n\t\t\n\t\tfacade.criarVenda(venda);\n\t\tint id = daovendas.buscarVendaPorNome(\"hoje\");\n\t\t\n\t\tassertEquals(id, facade.buscarIdVenda(id));\n\t\t\n\t\tfacade.apagarVenda(id);\n\t\t\n\t\tassertEquals(-1, facade.buscarIdVenda(id));\n\t}\n\t\n\t\n\t\n}\n\t\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,null,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,null,0,0,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,0,null,0,null,0,null,0,null,0,null,0,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,null,null,0,null,0,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,0,null,0,null,0,null,0,null,null,null,0,0,0,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,null,null,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,0,null,0,0,null,null,null,0,0,0,0,0,null,null,0,0,null,0,null,0,null,0,0,null,null,null,null,null,null],"name":"test/FacadeTest.java"},{"source":"package test;\n\nimport static org.junit.Assert.*;\nimport gui.Main;\n\nimport java.util.ArrayList;\n\nimport models.venda.Venda;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport dao.concrete.DAOVendas;\n\npublic class MainTest {\n\n\tpublic Main main; \n\tpublic Venda venda;\n\t\n\t@Before\n\tpublic void setUp(){\n\t\tmain = new Main();\n\t\tvenda = new Venda();\n\t}\n\t\n\t@Test\n\tpublic void testCadastrarFuncionario(){\n\t\t\n\t}\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,0,null,null,null,null,0,null,null],"name":"test/MainTest.java"}]}